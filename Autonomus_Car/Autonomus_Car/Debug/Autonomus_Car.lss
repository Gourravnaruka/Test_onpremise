
Autonomus_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000112c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b4  00800060  0000112c  000011c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001f  00800114  00800114  00001274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003a8  00000000  00000000  000012e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002fad  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc4  00000000  00000000  00004635  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019b6  00000000  00000000  000055f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000007a0  00000000  00000000  00006fb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000d59  00000000  00000000  00007750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015e4  00000000  00000000  000084a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  00009a8d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e0 06 	jmp	0xdc0	; 0xdc0 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 ba 07 	jmp	0xf74	; 0xf74 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e2       	ldi	r30, 0x2C	; 44
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 31       	cpi	r26, 0x14	; 20
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 e1       	ldi	r26, 0x14	; 20
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 33       	cpi	r26, 0x33	; 51
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <main>
      8a:	0c 94 94 08 	jmp	0x1128	; 0x1128 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Car_StartSpeed>:
  H_DcMotor_StopSpeed();
}

void Car_StartSpeed(void)
{
	H_DcMotor_StartSpeed(); 
      92:	0e 94 bc 02 	call	0x578	; 0x578 <H_DcMotor_StartSpeed>
      96:	08 95       	ret

00000098 <Car_Forward>:
}

void Car_Forward (u8 Local_u8_Speed)
{
	
	H_DcMotor_Setspeed(Local_u8_Speed);
      98:	0e 94 b9 02 	call	0x572	; 0x572 <H_DcMotor_Setspeed>
	H_DcMotor_SetDirection(Right_M,CLK);
      9c:	61 e0       	ldi	r22, 0x01	; 1
      9e:	83 e0       	ldi	r24, 0x03	; 3
      a0:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
	H_DcMotor_SetDirection(Left_M,ACLK);
      a4:	62 e0       	ldi	r22, 0x02	; 2
      a6:	84 e0       	ldi	r24, 0x04	; 4
      a8:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
      ac:	08 95       	ret

000000ae <Car_Reverse>:
}

void Car_Reverse (u8 Local_u8_Speed)
{
	H_DcMotor_Setspeed(Local_u8_Speed);
      ae:	0e 94 b9 02 	call	0x572	; 0x572 <H_DcMotor_Setspeed>
	H_DcMotor_SetDirection(Right_M,ACLK);
      b2:	62 e0       	ldi	r22, 0x02	; 2
      b4:	83 e0       	ldi	r24, 0x03	; 3
      b6:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
	H_DcMotor_SetDirection(Left_M,CLK);
      ba:	61 e0       	ldi	r22, 0x01	; 1
      bc:	84 e0       	ldi	r24, 0x04	; 4
      be:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
      c2:	08 95       	ret

000000c4 <Car_Round_Right_Turn>:
}

void Car_Round_Right_Turn (u8 Local_u8_Speed)
{
	H_DcMotor_Setspeed(Local_u8_Speed);
      c4:	0e 94 b9 02 	call	0x572	; 0x572 <H_DcMotor_Setspeed>
	H_DcMotor_SetDirection(Right_M,ACLK);
      c8:	62 e0       	ldi	r22, 0x02	; 2
      ca:	83 e0       	ldi	r24, 0x03	; 3
      cc:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
	H_DcMotor_SetDirection(Left_M,ACLK);
      d0:	62 e0       	ldi	r22, 0x02	; 2
      d2:	84 e0       	ldi	r24, 0x04	; 4
      d4:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
      d8:	08 95       	ret

000000da <Car_Round_Left_Turn>:
}

void Car_Round_Left_Turn (u8 Local_u8_Speed)
{
	H_DcMotor_Setspeed(Local_u8_Speed);
      da:	0e 94 b9 02 	call	0x572	; 0x572 <H_DcMotor_Setspeed>
	H_DcMotor_SetDirection(Right_M,CLK);
      de:	61 e0       	ldi	r22, 0x01	; 1
      e0:	83 e0       	ldi	r24, 0x03	; 3
      e2:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
	H_DcMotor_SetDirection(Left_M,CLK);
      e6:	61 e0       	ldi	r22, 0x01	; 1
      e8:	84 e0       	ldi	r24, 0x04	; 4
      ea:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
      ee:	08 95       	ret

000000f0 <Car_Turn_Right>:
}

void Car_Turn_Right (u8 Local_u8_Speed)
{
	H_DcMotor_Setspeed(Local_u8_Speed);
      f0:	0e 94 b9 02 	call	0x572	; 0x572 <H_DcMotor_Setspeed>
	H_DcMotor_SetDirection(Left_M,ACLK);
      f4:	62 e0       	ldi	r22, 0x02	; 2
      f6:	84 e0       	ldi	r24, 0x04	; 4
      f8:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
	H_DcMotor_Stop(Right_M);
      fc:	83 e0       	ldi	r24, 0x03	; 3
      fe:	0e 94 a2 02 	call	0x544	; 0x544 <H_DcMotor_Stop>
     102:	08 95       	ret

00000104 <Car_Turn_Left>:
}

void Car_Turn_Left (u8 Local_u8_Speed)
{
	H_DcMotor_Setspeed(Local_u8_Speed);
     104:	0e 94 b9 02 	call	0x572	; 0x572 <H_DcMotor_Setspeed>
	H_DcMotor_SetDirection(Right_M,CLK);
     108:	61 e0       	ldi	r22, 0x01	; 1
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	0e 94 6f 02 	call	0x4de	; 0x4de <H_DcMotor_SetDirection>
	H_DcMotor_Stop(Left_M);
     110:	84 e0       	ldi	r24, 0x04	; 4
     112:	0e 94 a2 02 	call	0x544	; 0x544 <H_DcMotor_Stop>
     116:	08 95       	ret

00000118 <Car_Stop>:
}

void Car_Stop (void)
{
	
	H_DcMotor_Stop(Right_M);
     118:	83 e0       	ldi	r24, 0x03	; 3
     11a:	0e 94 a2 02 	call	0x544	; 0x544 <H_DcMotor_Stop>
	H_DcMotor_Stop(Left_M);
     11e:	84 e0       	ldi	r24, 0x04	; 4
     120:	0e 94 a2 02 	call	0x544	; 0x544 <H_DcMotor_Stop>
     124:	08 95       	ret

00000126 <USS_Right>:


// Ultrasonic direction using servo motor
void USS_Right (void)
{
	H_Servo_SetAngel(0);
     126:	80 e0       	ldi	r24, 0x00	; 0
     128:	0e 94 db 04 	call	0x9b6	; 0x9b6 <H_Servo_SetAngel>
     12c:	08 95       	ret

0000012e <USS_Forward>:
}

void USS_Forward (void)
{
	H_Servo_SetAngel(90);
     12e:	8a e5       	ldi	r24, 0x5A	; 90
     130:	0e 94 db 04 	call	0x9b6	; 0x9b6 <H_Servo_SetAngel>
     134:	08 95       	ret

00000136 <USS_Left>:
}

void USS_Left (void)
{
	H_Servo_SetAngel(180);
     136:	84 eb       	ldi	r24, 0xB4	; 180
     138:	0e 94 db 04 	call	0x9b6	; 0x9b6 <H_Servo_SetAngel>
     13c:	08 95       	ret

0000013e <Measure_Distance>:



// Ultrasonic sensor measuring distance
u16 Measure_Distance (void)
{
     13e:	cf 92       	push	r12
     140:	df 92       	push	r13
     142:	ef 92       	push	r14
     144:	ff 92       	push	r15
	u16 Local_u16_Distance;
	H_Lcd_GoTo(1,10);
     146:	6a e0       	ldi	r22, 0x0A	; 10
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
	Local_u16_Distance = H_HC_SR04_Distacne()/928;
     14e:	0e 94 55 03 	call	0x6aa	; 0x6aa <H_HC_SR04_Distacne>
     152:	20 ea       	ldi	r18, 0xA0	; 160
     154:	33 e0       	ldi	r19, 0x03	; 3
     156:	40 e0       	ldi	r20, 0x00	; 0
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	0e 94 30 08 	call	0x1060	; 0x1060 <__udivmodsi4>
     15e:	69 01       	movw	r12, r18
     160:	7a 01       	movw	r14, r20
	H_Lcd_WriteNumber(Local_u16_Distance);
     162:	ca 01       	movw	r24, r20
     164:	b9 01       	movw	r22, r18
     166:	88 27       	eor	r24, r24
     168:	99 27       	eor	r25, r25
     16a:	0e 94 36 04 	call	0x86c	; 0x86c <H_Lcd_WriteNumber>
	H_Lcd_WriteString(" cm");
     16e:	83 e6       	ldi	r24, 0x63	; 99
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
	return Local_u16_Distance;
}
     176:	c6 01       	movw	r24, r12
     178:	ff 90       	pop	r15
     17a:	ef 90       	pop	r14
     17c:	df 90       	pop	r13
     17e:	cf 90       	pop	r12
     180:	08 95       	ret

00000182 <Check_Direction>:
}



u8 Check_Direction(void)
{
     182:	cf 93       	push	r28
  u8 Distances [2] = {0,0};
  u8 Local_u8_TurnDirection;	
  
  // measure the distance from obstacle in left direction
  USS_Left();     
     184:	0e 94 9b 00 	call	0x136	; 0x136 <USS_Left>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     188:	2f ef       	ldi	r18, 0xFF	; 255
     18a:	39 e6       	ldi	r19, 0x69	; 105
     18c:	88 e1       	ldi	r24, 0x18	; 24
     18e:	21 50       	subi	r18, 0x01	; 1
     190:	30 40       	sbci	r19, 0x00	; 0
     192:	80 40       	sbci	r24, 0x00	; 0
     194:	e1 f7       	brne	.-8      	; 0x18e <Check_Direction+0xc>
     196:	00 c0       	rjmp	.+0      	; 0x198 <Check_Direction+0x16>
     198:	00 00       	nop
  _delay_ms(500);
  Distances[0] = Measure_Distance();
     19a:	0e 94 9f 00 	call	0x13e	; 0x13e <Measure_Distance>
     19e:	c8 2f       	mov	r28, r24
     1a0:	9f ef       	ldi	r25, 0xFF	; 255
     1a2:	23 ec       	ldi	r18, 0xC3	; 195
     1a4:	39 e0       	ldi	r19, 0x09	; 9
     1a6:	91 50       	subi	r25, 0x01	; 1
     1a8:	20 40       	sbci	r18, 0x00	; 0
     1aa:	30 40       	sbci	r19, 0x00	; 0
     1ac:	e1 f7       	brne	.-8      	; 0x1a6 <Check_Direction+0x24>
     1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <Check_Direction+0x2e>
     1b0:	00 00       	nop
  _delay_ms(200);
  
  // measure the distance form obstacle in right direction 
  USS_Right(); 
     1b2:	0e 94 93 00 	call	0x126	; 0x126 <USS_Right>
     1b6:	8f ef       	ldi	r24, 0xFF	; 255
     1b8:	99 e6       	ldi	r25, 0x69	; 105
     1ba:	28 e1       	ldi	r18, 0x18	; 24
     1bc:	81 50       	subi	r24, 0x01	; 1
     1be:	90 40       	sbci	r25, 0x00	; 0
     1c0:	20 40       	sbci	r18, 0x00	; 0
     1c2:	e1 f7       	brne	.-8      	; 0x1bc <Check_Direction+0x3a>
     1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <Check_Direction+0x44>
     1c6:	00 00       	nop
  _delay_ms(500); 
  Distances[1] = Measure_Distance();
     1c8:	0e 94 9f 00 	call	0x13e	; 0x13e <Measure_Distance>
     1cc:	3f ef       	ldi	r19, 0xFF	; 255
     1ce:	93 ec       	ldi	r25, 0xC3	; 195
     1d0:	29 e0       	ldi	r18, 0x09	; 9
     1d2:	31 50       	subi	r19, 0x01	; 1
     1d4:	90 40       	sbci	r25, 0x00	; 0
     1d6:	20 40       	sbci	r18, 0x00	; 0
     1d8:	e1 f7       	brne	.-8      	; 0x1d2 <Check_Direction+0x50>
     1da:	00 c0       	rjmp	.+0      	; 0x1dc <Check_Direction+0x5a>
     1dc:	00 00       	nop
  _delay_ms(200);
  
  //
  if (Distances[0] >= 200 && Distances[1]>=200)    // if both direction are clear turn right
     1de:	c8 3c       	cpi	r28, 0xC8	; 200
     1e0:	10 f0       	brcs	.+4      	; 0x1e6 <Check_Direction+0x64>
     1e2:	88 3c       	cpi	r24, 0xC8	; 200
     1e4:	58 f4       	brcc	.+22     	; 0x1fc <Check_Direction+0x7a>
    Local_u8_TurnDirection = Right;
  else if (Distances[0] <= Stop_Distance && Distances[1]<= Stop_Distance)   // if both direction are blocked turn around
     1e6:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <Stop_Distance>
     1ea:	9c 17       	cp	r25, r28
     1ec:	10 f0       	brcs	.+4      	; 0x1f2 <Check_Direction+0x70>
     1ee:	98 17       	cp	r25, r24
     1f0:	38 f4       	brcc	.+14     	; 0x200 <Check_Direction+0x7e>
  Distances[1] = Measure_Distance();
  _delay_ms(200);
  
  //
  if (Distances[0] >= 200 && Distances[1]>=200)    // if both direction are clear turn right
    Local_u8_TurnDirection = Right;
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	c8 17       	cp	r28, r24
     1f6:	28 f0       	brcs	.+10     	; 0x202 <Check_Direction+0x80>
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	03 c0       	rjmp	.+6      	; 0x202 <Check_Direction+0x80>
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	01 c0       	rjmp	.+2      	; 0x202 <Check_Direction+0x80>
  else if (Distances[0] <= Stop_Distance && Distances[1]<= Stop_Distance)   // if both direction are blocked turn around
    Local_u8_TurnDirection = TurnRound;
     200:	92 e0       	ldi	r25, 0x02	; 2
	Local_u8_TurnDirection = Left;
  else if (Distances[0]< Distances[1] )   // if right direction is clear turn right
	Local_u8_TurnDirection = Right;
	
	return Local_u8_TurnDirection;
}
     202:	89 2f       	mov	r24, r25
     204:	cf 91       	pop	r28
     206:	08 95       	ret

00000208 <Remote_Control>:



void Remote_Control (u8 Local_u8_speed, u8 control)
{
	switch (control)
     208:	67 34       	cpi	r22, 0x47	; 71
     20a:	09 f4       	brne	.+2      	; 0x20e <Remote_Control+0x6>
     20c:	45 c0       	rjmp	.+138    	; 0x298 <Remote_Control+0x90>
     20e:	28 f4       	brcc	.+10     	; 0x21a <Remote_Control+0x12>
     210:	62 34       	cpi	r22, 0x42	; 66
     212:	b1 f0       	breq	.+44     	; 0x240 <Remote_Control+0x38>
     214:	66 34       	cpi	r22, 0x46	; 70
     216:	49 f0       	breq	.+18     	; 0x22a <Remote_Control+0x22>
     218:	4a c0       	rjmp	.+148    	; 0x2ae <Remote_Control+0xa6>
     21a:	6c 34       	cpi	r22, 0x4C	; 76
     21c:	e1 f0       	breq	.+56     	; 0x256 <Remote_Control+0x4e>
     21e:	62 35       	cpi	r22, 0x52	; 82
     220:	29 f1       	breq	.+74     	; 0x26c <Remote_Control+0x64>
     222:	69 34       	cpi	r22, 0x49	; 73
     224:	09 f0       	breq	.+2      	; 0x228 <Remote_Control+0x20>
     226:	43 c0       	rjmp	.+134    	; 0x2ae <Remote_Control+0xa6>
     228:	2c c0       	rjmp	.+88     	; 0x282 <Remote_Control+0x7a>
	{
	  case 'F':
	  Car_Forward(Local_u8_speed);
     22a:	0e 94 4c 00 	call	0x98	; 0x98 <Car_Forward>
	  H_Lcd_GoTo(1,0);
     22e:	60 e0       	ldi	r22, 0x00	; 0
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
	  H_Lcd_WriteString("Forward         ");
     236:	87 e6       	ldi	r24, 0x67	; 103
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
	  break;
     23e:	08 95       	ret
	  
	  case 'B':
	  Car_Reverse(Local_u8_speed);
     240:	0e 94 57 00 	call	0xae	; 0xae <Car_Reverse>
	  H_Lcd_GoTo(1,0);
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
	  H_Lcd_WriteString("Backward        ");
     24c:	88 e7       	ldi	r24, 0x78	; 120
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
	  break;
     254:	08 95       	ret
	  
	  case 'L':
	  Car_Round_Left_Turn(Local_u8_speed);
     256:	0e 94 6d 00 	call	0xda	; 0xda <Car_Round_Left_Turn>
	  H_Lcd_GoTo(1,0);
     25a:	60 e0       	ldi	r22, 0x00	; 0
     25c:	81 e0       	ldi	r24, 0x01	; 1
     25e:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
	  H_Lcd_WriteString("Round Left      ");
     262:	89 e8       	ldi	r24, 0x89	; 137
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
	  break;
     26a:	08 95       	ret
	  
	  case 'R':
	  Car_Round_Right_Turn(Local_u8_speed);
     26c:	0e 94 62 00 	call	0xc4	; 0xc4 <Car_Round_Right_Turn>
	  H_Lcd_GoTo(1,0);
     270:	60 e0       	ldi	r22, 0x00	; 0
     272:	81 e0       	ldi	r24, 0x01	; 1
     274:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
	  H_Lcd_WriteString("Round Right     ");
     278:	8a e9       	ldi	r24, 0x9A	; 154
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
	  break;
     280:	08 95       	ret
	  
	  case 'I':
	  Car_Turn_Right(Local_u8_speed);
     282:	0e 94 78 00 	call	0xf0	; 0xf0 <Car_Turn_Right>
	  H_Lcd_GoTo(1,0); 
     286:	60 e0       	ldi	r22, 0x00	; 0
     288:	81 e0       	ldi	r24, 0x01	; 1
     28a:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
	  H_Lcd_WriteString("Turning Right   ");
     28e:	8b ea       	ldi	r24, 0xAB	; 171
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
	  break;	
     296:	08 95       	ret
	  
	  case 'G':
	  Car_Turn_Left(Local_u8_speed);
     298:	0e 94 82 00 	call	0x104	; 0x104 <Car_Turn_Left>
	  H_Lcd_GoTo(1,0);
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
	  H_Lcd_WriteString("Turning Left    ");
     2a4:	8c eb       	ldi	r24, 0xBC	; 188
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
	  break;
     2ac:	08 95       	ret
	  
	  default:
	  Car_Stop();
     2ae:	0e 94 8c 00 	call	0x118	; 0x118 <Car_Stop>
	  H_Lcd_GoTo(1,0);
     2b2:	60 e0       	ldi	r22, 0x00	; 0
     2b4:	81 e0       	ldi	r24, 0x01	; 1
     2b6:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
	  H_Lcd_WriteString("      Stop       ");
     2ba:	8d ec       	ldi	r24, 0xCD	; 205
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
     2c2:	08 95       	ret

000002c4 <Autonomus>:
}


void Autonomus (void)
{
	USS_Forward();
     2c4:	0e 94 97 00 	call	0x12e	; 0x12e <USS_Forward>
     2c8:	2f ef       	ldi	r18, 0xFF	; 255
     2ca:	8d e2       	ldi	r24, 0x2D	; 45
     2cc:	92 e2       	ldi	r25, 0x22	; 34
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	80 40       	sbci	r24, 0x00	; 0
     2d2:	90 40       	sbci	r25, 0x00	; 0
     2d4:	e1 f7       	brne	.-8      	; 0x2ce <Autonomus+0xa>
     2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <Autonomus+0x14>
     2d8:	00 00       	nop
	_delay_ms(700);
	Distance = Measure_Distance();
     2da:	0e 94 9f 00 	call	0x13e	; 0x13e <Measure_Distance>
     2de:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Distance+0x1>
     2e2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Distance>
	if (Distance >= Stop_Distance)
     2e6:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <Stop_Distance>
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	82 17       	cp	r24, r18
     2ee:	93 07       	cpc	r25, r19
     2f0:	e0 f0       	brcs	.+56     	; 0x32a <Autonomus+0x66>
	{
		Car_Forward(Speed);
     2f2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <Speed>
     2f6:	0e 94 4c 00 	call	0x98	; 0x98 <Car_Forward>
     2fa:	0d c0       	rjmp	.+26     	; 0x316 <Autonomus+0x52>
	}
	
	while (Distance >= Stop_Distance)
	{
		Distance = Measure_Distance();
     2fc:	0e 94 9f 00 	call	0x13e	; 0x13e <Measure_Distance>
     300:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <Distance+0x1>
     304:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <Distance>
		Car_Mode = M_Dio_PinRead(P_B0);
     308:	84 e1       	ldi	r24, 0x14	; 20
     30a:	0e 94 01 06 	call	0xc02	; 0xc02 <M_Dio_PinRead>
     30e:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Car_Mode>
		if(Car_Mode == RC)break;	
     312:	81 30       	cpi	r24, 0x01	; 1
     314:	51 f0       	breq	.+20     	; 0x32a <Autonomus+0x66>
	if (Distance >= Stop_Distance)
	{
		Car_Forward(Speed);
	}
	
	while (Distance >= Stop_Distance)
     316:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <Stop_Distance>
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <Distance>
     320:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <Distance+0x1>
     324:	28 17       	cp	r18, r24
     326:	39 07       	cpc	r19, r25
     328:	48 f7       	brcc	.-46     	; 0x2fc <Autonomus+0x38>
		Car_Mode = M_Dio_PinRead(P_B0);
		if(Car_Mode == RC)break;	
	}
	

	Car_Stop();
     32a:	0e 94 8c 00 	call	0x118	; 0x118 <Car_Stop>
	Turn_Direction = Check_Direction();
     32e:	0e 94 c1 00 	call	0x182	; 0x182 <Check_Direction>
     332:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <Turn_Direction>
	
	switch(Turn_Direction)
     336:	81 30       	cpi	r24, 0x01	; 1
     338:	b1 f0       	breq	.+44     	; 0x366 <Autonomus+0xa2>
     33a:	18 f0       	brcs	.+6      	; 0x342 <Autonomus+0x7e>
     33c:	82 30       	cpi	r24, 0x02	; 2
     33e:	29 f1       	breq	.+74     	; 0x38a <Autonomus+0xc6>
     340:	35 c0       	rjmp	.+106    	; 0x3ac <Autonomus+0xe8>
	{
		case Left:
		Car_Round_Left_Turn(Turn_Speed);
     342:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     346:	0e 94 6d 00 	call	0xda	; 0xda <Car_Round_Left_Turn>
     34a:	2f ef       	ldi	r18, 0xFF	; 255
     34c:	8e ef       	ldi	r24, 0xFE	; 254
     34e:	94 e1       	ldi	r25, 0x14	; 20
     350:	21 50       	subi	r18, 0x01	; 1
     352:	80 40       	sbci	r24, 0x00	; 0
     354:	90 40       	sbci	r25, 0x00	; 0
     356:	e1 f7       	brne	.-8      	; 0x350 <Autonomus+0x8c>
     358:	00 c0       	rjmp	.+0      	; 0x35a <Autonomus+0x96>
     35a:	00 00       	nop
		_delay_ms(430);
		Car_Stop();
     35c:	0e 94 8c 00 	call	0x118	; 0x118 <Car_Stop>
		USS_Forward();
     360:	0e 94 97 00 	call	0x12e	; 0x12e <USS_Forward>
		break;
     364:	23 c0       	rjmp	.+70     	; 0x3ac <Autonomus+0xe8>
		
		case Right:
		Car_Round_Right_Turn(Turn_Speed);
     366:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     36a:	0e 94 62 00 	call	0xc4	; 0xc4 <Car_Round_Right_Turn>
     36e:	2f ef       	ldi	r18, 0xFF	; 255
     370:	8e ef       	ldi	r24, 0xFE	; 254
     372:	94 e1       	ldi	r25, 0x14	; 20
     374:	21 50       	subi	r18, 0x01	; 1
     376:	80 40       	sbci	r24, 0x00	; 0
     378:	90 40       	sbci	r25, 0x00	; 0
     37a:	e1 f7       	brne	.-8      	; 0x374 <Autonomus+0xb0>
     37c:	00 c0       	rjmp	.+0      	; 0x37e <Autonomus+0xba>
     37e:	00 00       	nop
		_delay_ms(430);
		Car_Stop();
     380:	0e 94 8c 00 	call	0x118	; 0x118 <Car_Stop>
		USS_Forward();
     384:	0e 94 97 00 	call	0x12e	; 0x12e <USS_Forward>
		break;
     388:	11 c0       	rjmp	.+34     	; 0x3ac <Autonomus+0xe8>
		
		case TurnRound:
		Car_Round_Right_Turn(Turn_Speed);
     38a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     38e:	0e 94 62 00 	call	0xc4	; 0xc4 <Car_Round_Right_Turn>
     392:	2f ef       	ldi	r18, 0xFF	; 255
     394:	81 e5       	ldi	r24, 0x51	; 81
     396:	9c e1       	ldi	r25, 0x1C	; 28
     398:	21 50       	subi	r18, 0x01	; 1
     39a:	80 40       	sbci	r24, 0x00	; 0
     39c:	90 40       	sbci	r25, 0x00	; 0
     39e:	e1 f7       	brne	.-8      	; 0x398 <Autonomus+0xd4>
     3a0:	00 c0       	rjmp	.+0      	; 0x3a2 <Autonomus+0xde>
     3a2:	00 00       	nop
		_delay_ms(580);
		Car_Stop();
     3a4:	0e 94 8c 00 	call	0x118	; 0x118 <Car_Stop>
		USS_Forward();
     3a8:	0e 94 97 00 	call	0x12e	; 0x12e <USS_Forward>
     3ac:	2f ef       	ldi	r18, 0xFF	; 255
     3ae:	80 e7       	ldi	r24, 0x70	; 112
     3b0:	92 e0       	ldi	r25, 0x02	; 2
     3b2:	21 50       	subi	r18, 0x01	; 1
     3b4:	80 40       	sbci	r24, 0x00	; 0
     3b6:	90 40       	sbci	r25, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <Autonomus+0xee>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <Autonomus+0xf8>
     3bc:	00 00       	nop
     3be:	08 95       	ret

000003c0 <main>:
u8  Turn_Speed = 50;
u8  Manual_Speed;

int main(void)
{
    H_DcMotor_Init();
     3c0:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <H_DcMotor_Init>
	H_Lcd_Init();
     3c4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <H_Lcd_Init>
    H_HC_SR04_Init();
     3c8:	0e 94 1c 03 	call	0x638	; 0x638 <H_HC_SR04_Init>
	H_Servo_Init();
     3cc:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <H_Servo_Init>
	H_Servo_Start();
     3d0:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <H_Servo_Start>
	H_Lcd_Clr();
     3d4:	0e 94 b9 04 	call	0x972	; 0x972 <H_Lcd_Clr>
	Car_StartSpeed();
     3d8:	0e 94 49 00 	call	0x92	; 0x92 <Car_StartSpeed>
	M_Uart_Init();
     3dc:	0e 94 0d 08 	call	0x101a	; 0x101a <M_Uart_Init>
	M_Dio_PinMode(P_B0,INPUT);
     3e0:	62 e0       	ldi	r22, 0x02	; 2
     3e2:	84 e1       	ldi	r24, 0x14	; 20
     3e4:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
    while (1) 
    {
		Car_Mode = M_Dio_PinRead(P_B0);
     3e8:	84 e1       	ldi	r24, 0x14	; 20
     3ea:	0e 94 01 06 	call	0xc02	; 0xc02 <M_Dio_PinRead>
     3ee:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Car_Mode>
		//Bluetooth = M_Uart_Rec();
		//H_Lcd_GoTo(0,0);
		//H_Lcd_WriteCharacter(Bluetooth);
		//H_Lcd_Clr();
		H_Lcd_GoTo(1,0);
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
		H_Lcd_WriteNumber(Car_Mode);
     3fa:	60 91 28 01 	lds	r22, 0x0128	; 0x800128 <Car_Mode>
     3fe:	70 e0       	ldi	r23, 0x00	; 0
     400:	80 e0       	ldi	r24, 0x00	; 0
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	0e 94 36 04 	call	0x86c	; 0x86c <H_Lcd_WriteNumber>
		
		// Manual Mode
	     while (1 )  //Car_Mode == RC
		{
			H_Lcd_GoTo(0,0);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
			H_Lcd_WriteString("     Manual     ");
     410:	8f ed       	ldi	r24, 0xDF	; 223
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
			Bluetooth = M_Uart_Rec();
     418:	0e 94 18 08 	call	0x1030	; 0x1030 <M_Uart_Rec>
     41c:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <Bluetooth>
			//H_Lcd_GoTo(1,0);
			//H_Lcd_WriteString("            ");
			
			if (Bluetooth >= 48 && Bluetooth <= 57)
     420:	90 ed       	ldi	r25, 0xD0	; 208
     422:	98 0f       	add	r25, r24
     424:	9a 30       	cpi	r25, 0x0A	; 10
     426:	b8 f4       	brcc	.+46     	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
			{
				Manual_Speed = (Bluetooth - 48)*10;
     428:	88 0f       	add	r24, r24
     42a:	80 56       	subi	r24, 0x60	; 96
     42c:	98 2f       	mov	r25, r24
     42e:	99 0f       	add	r25, r25
     430:	99 0f       	add	r25, r25
     432:	89 0f       	add	r24, r25
     434:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <Manual_Speed>
			    H_Lcd_GoTo(1,8);
     438:	68 e0       	ldi	r22, 0x08	; 8
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
				H_Lcd_WriteString("speed:");
     440:	80 ef       	ldi	r24, 0xF0	; 240
     442:	90 e0       	ldi	r25, 0x00	; 0
     444:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
				H_Lcd_WriteNumber(Manual_Speed);	
     448:	60 91 23 01 	lds	r22, 0x0123	; 0x800123 <Manual_Speed>
     44c:	70 e0       	ldi	r23, 0x00	; 0
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 36 04 	call	0x86c	; 0x86c <H_Lcd_WriteNumber>
			}
			Remote_Control(Manual_Speed,Bluetooth);
     456:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <Bluetooth>
     45a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <Manual_Speed>
     45e:	0e 94 04 01 	call	0x208	; 0x208 <Remote_Control>
			Car_Mode = M_Dio_PinRead(P_B0);
     462:	84 e1       	ldi	r24, 0x14	; 20
     464:	0e 94 01 06 	call	0xc02	; 0xc02 <M_Dio_PinRead>
     468:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Car_Mode>
			if (Car_Mode == AUTO)break;
     46c:	81 11       	cpse	r24, r1
     46e:	cc cf       	rjmp	.-104    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
		}
		
		H_Lcd_Clr();
     470:	0e 94 b9 04 	call	0x972	; 0x972 <H_Lcd_Clr>
		
		//  Autonomous Mode
		while (1)  //Car_Mode == AUTO
		{
			//H_Lcd_Clr();
			H_Lcd_GoTo(0,0);
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
			H_Lcd_WriteString("   Autonomous   ");
     47c:	87 ef       	ldi	r24, 0xF7	; 247
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
			H_Lcd_GoTo(1,0);
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	81 e0       	ldi	r24, 0x01	; 1
     488:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
			H_Lcd_WriteString("Distance= ");
     48c:	88 e0       	ldi	r24, 0x08	; 8
     48e:	91 e0       	ldi	r25, 0x01	; 1
     490:	0e 94 20 04 	call	0x840	; 0x840 <H_Lcd_WriteString>
			H_Lcd_GoTo(1,11);
     494:	6b e0       	ldi	r22, 0x0B	; 11
     496:	81 e0       	ldi	r24, 0x01	; 1
     498:	0e 94 bd 04 	call	0x97a	; 0x97a <H_Lcd_GoTo>
			H_Lcd_WriteCharacter(Bluetooth);
     49c:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <Bluetooth>
     4a0:	0e 94 66 03 	call	0x6cc	; 0x6cc <H_Lcd_WriteCharacter>
			Autonomus();
     4a4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <Autonomus>
			Car_Mode = M_Dio_PinRead(P_B0);
     4a8:	84 e1       	ldi	r24, 0x14	; 20
     4aa:	0e 94 01 06 	call	0xc02	; 0xc02 <M_Dio_PinRead>
     4ae:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <Car_Mode>
			if (Car_Mode == RC)break;
     4b2:	81 30       	cpi	r24, 0x01	; 1
     4b4:	f9 f6       	brne	.-66     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
     4b6:	98 cf       	rjmp	.-208    	; 0x3e8 <main+0x28>

000004b8 <H_DcMotor_Init>:
			case ON:
			M_Dio_PinWrite(L_DCMOTORS_ENA,HIGH);;
			break;
			
			case OFF:
			M_Dio_PinWrite(L_DCMOTORS_ENA,LOW);
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	8f e1       	ldi	r24, 0x1F	; 31
     4bc:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
     4c0:	61 e0       	ldi	r22, 0x01	; 1
     4c2:	80 e2       	ldi	r24, 0x20	; 32
     4c4:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	81 e2       	ldi	r24, 0x21	; 33
     4cc:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	82 e2       	ldi	r24, 0x22	; 34
     4d4:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
     4d8:	0e 94 a0 07 	call	0xf40	; 0xf40 <M_Timer2_Pwm2Init>
     4dc:	08 95       	ret

000004de <H_DcMotor_SetDirection>:
     4de:	83 30       	cpi	r24, 0x03	; 3
     4e0:	19 f0       	breq	.+6      	; 0x4e8 <H_DcMotor_SetDirection+0xa>
     4e2:	84 30       	cpi	r24, 0x04	; 4
     4e4:	c1 f0       	breq	.+48     	; 0x516 <H_DcMotor_SetDirection+0x38>
     4e6:	08 95       	ret
     4e8:	61 30       	cpi	r22, 0x01	; 1
     4ea:	19 f0       	breq	.+6      	; 0x4f2 <H_DcMotor_SetDirection+0x14>
     4ec:	62 30       	cpi	r22, 0x02	; 2
     4ee:	51 f0       	breq	.+20     	; 0x504 <H_DcMotor_SetDirection+0x26>
     4f0:	08 95       	ret
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	8f e1       	ldi	r24, 0x1F	; 31
     4f6:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     4fa:	62 e0       	ldi	r22, 0x02	; 2
     4fc:	80 e2       	ldi	r24, 0x20	; 32
     4fe:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     502:	08 95       	ret
     504:	62 e0       	ldi	r22, 0x02	; 2
     506:	8f e1       	ldi	r24, 0x1F	; 31
     508:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     50c:	61 e0       	ldi	r22, 0x01	; 1
     50e:	80 e2       	ldi	r24, 0x20	; 32
     510:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     514:	08 95       	ret
     516:	61 30       	cpi	r22, 0x01	; 1
     518:	19 f0       	breq	.+6      	; 0x520 <H_DcMotor_SetDirection+0x42>
     51a:	62 30       	cpi	r22, 0x02	; 2
     51c:	51 f0       	breq	.+20     	; 0x532 <H_DcMotor_SetDirection+0x54>
     51e:	08 95       	ret
     520:	61 e0       	ldi	r22, 0x01	; 1
     522:	81 e2       	ldi	r24, 0x21	; 33
     524:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     528:	62 e0       	ldi	r22, 0x02	; 2
     52a:	82 e2       	ldi	r24, 0x22	; 34
     52c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     530:	08 95       	ret
     532:	62 e0       	ldi	r22, 0x02	; 2
     534:	81 e2       	ldi	r24, 0x21	; 33
     536:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     53a:	61 e0       	ldi	r22, 0x01	; 1
     53c:	82 e2       	ldi	r24, 0x22	; 34
     53e:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     542:	08 95       	ret

00000544 <H_DcMotor_Stop>:
}


void H_DcMotor_Stop(u8 Local_u8_Motor)
{
	switch(Local_u8_Motor)
     544:	83 30       	cpi	r24, 0x03	; 3
     546:	19 f0       	breq	.+6      	; 0x54e <H_DcMotor_Stop+0xa>
     548:	84 30       	cpi	r24, 0x04	; 4
     54a:	51 f0       	breq	.+20     	; 0x560 <H_DcMotor_Stop+0x1c>
     54c:	08 95       	ret
	{
		case Right_M:
		M_Dio_PinWrite(R_DCMOTOR_PIN1,LOW);
     54e:	62 e0       	ldi	r22, 0x02	; 2
     550:	8f e1       	ldi	r24, 0x1F	; 31
     552:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
		M_Dio_PinWrite(R_DCMOTOR_PIN2,LOW);
     556:	62 e0       	ldi	r22, 0x02	; 2
     558:	80 e2       	ldi	r24, 0x20	; 32
     55a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
		break;
     55e:	08 95       	ret
		
		case Left_M:
		M_Dio_PinWrite(L_DCMOTOR_PIN1,LOW);
     560:	62 e0       	ldi	r22, 0x02	; 2
     562:	81 e2       	ldi	r24, 0x21	; 33
     564:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
		M_Dio_PinWrite(L_DCMOTOR_PIN2,LOW);
     568:	62 e0       	ldi	r22, 0x02	; 2
     56a:	82 e2       	ldi	r24, 0x22	; 34
     56c:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     570:	08 95       	ret

00000572 <H_DcMotor_Setspeed>:
	
}

void H_DcMotor_Setspeed(u8 Local_u8_Speed)
{
	M_Timer2_Pwm2SetDutyCycle(Local_u8_Speed);
     572:	0e 94 ae 07 	call	0xf5c	; 0xf5c <M_Timer2_Pwm2SetDutyCycle>
     576:	08 95       	ret

00000578 <H_DcMotor_StartSpeed>:
}


void H_DcMotor_StartSpeed(void)
{
	M_Timer2_Pwm2Start();
     578:	0e 94 b7 07 	call	0xf6e	; 0xf6e <M_Timer2_Pwm2Start>
     57c:	08 95       	ret

0000057e <H_HC_SR04_Time>:
}

// This function executed at Timer 0 overflow interrupt 
void H_HC_SR04_Time(void)
{
	Timer_Counter++;
     57e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Timer_Counter>
     582:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Timer_Counter+0x1>
     586:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <Timer_Counter+0x2>
     58a:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <Timer_Counter+0x3>
     58e:	01 96       	adiw	r24, 0x01	; 1
     590:	a1 1d       	adc	r26, r1
     592:	b1 1d       	adc	r27, r1
     594:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <Timer_Counter>
     598:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <Timer_Counter+0x1>
     59c:	a0 93 17 01 	sts	0x0117, r26	; 0x800117 <Timer_Counter+0x2>
     5a0:	b0 93 18 01 	sts	0x0118, r27	; 0x800118 <Timer_Counter+0x3>
	if (Timer_Counter > 1450)   // case MC 8MHz 730, case 16MHz 1450
     5a4:	8b 3a       	cpi	r24, 0xAB	; 171
     5a6:	95 40       	sbci	r25, 0x05	; 5
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	68 f0       	brcs	.+26     	; 0x5c8 <H_HC_SR04_Time+0x4a>
	{
	  TCNT0 = 0x00;
     5ae:	12 be       	out	0x32, r1	; 50
	  Sensor_Operation = 0;
     5b0:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Sensor_Operation>
	  Rising_Edge = 0;
     5b4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
	  Timer_Counter = 0;
     5b8:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Timer_Counter>
     5bc:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Timer_Counter+0x1>
     5c0:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Timer_Counter+0x2>
     5c4:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Timer_Counter+0x3>
     5c8:	08 95       	ret

000005ca <H_HC_SR04_Distance_Cal>:


// This function executed at External Interrupt (ECHO)
void  H_HC_SR04_Distance_Cal(void)
{
  if (Sensor_Operation == 1)
     5ca:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Sensor_Operation>
     5ce:	81 30       	cpi	r24, 0x01	; 1
     5d0:	91 f5       	brne	.+100    	; 0x636 <H_HC_SR04_Distance_Cal+0x6c>
	{
		if (Rising_Edge == 0)  // change from low to high 
     5d2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
     5d6:	81 11       	cpse	r24, r1
     5d8:	06 c0       	rjmp	.+12     	; 0x5e6 <H_HC_SR04_Distance_Cal+0x1c>
		{
			M_Timer0_Start();
     5da:	0e 94 14 07 	call	0xe28	; 0xe28 <M_Timer0_Start>
			Rising_Edge = 1;	
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <__data_end>
     5e4:	08 95       	ret
		}
		else
		//if (Rising_Edge == 1)  // change from high to low
		{
			Pulses = (Timer_Counter * 256) + TCNT0;
     5e6:	22 b7       	in	r18, 0x32	; 50
     5e8:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Timer_Counter>
     5ec:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <Timer_Counter+0x1>
     5f0:	a0 91 17 01 	lds	r26, 0x0117	; 0x800117 <Timer_Counter+0x2>
     5f4:	b0 91 18 01 	lds	r27, 0x0118	; 0x800118 <Timer_Counter+0x3>
     5f8:	ba 2f       	mov	r27, r26
     5fa:	a9 2f       	mov	r26, r25
     5fc:	98 2f       	mov	r25, r24
     5fe:	88 27       	eor	r24, r24
     600:	82 0f       	add	r24, r18
     602:	91 1d       	adc	r25, r1
     604:	a1 1d       	adc	r26, r1
     606:	b1 1d       	adc	r27, r1
     608:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <Pulses>
     60c:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <Pulses+0x1>
     610:	a0 93 2b 01 	sts	0x012B, r26	; 0x80012b <Pulses+0x2>
     614:	b0 93 2c 01 	sts	0x012C, r27	; 0x80012c <Pulses+0x3>
			M_Timer0_Stop();
     618:	0e 94 1e 07 	call	0xe3c	; 0xe3c <M_Timer0_Stop>
			Timer_Counter = 0;
     61c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <Timer_Counter>
     620:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <Timer_Counter+0x1>
     624:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <Timer_Counter+0x2>
     628:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <Timer_Counter+0x3>
			Rising_Edge = 0;
     62c:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <__data_end>
			TCNT0 = 0;
     630:	12 be       	out	0x32, r1	; 50
			Sensor_Operation = 0;
     632:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <Sensor_Operation>
     636:	08 95       	ret

00000638 <H_HC_SR04_Init>:
u32 Pulses;
u8  Rising_Edge = 0;  

void H_HC_SR04_Init(void)
{
	M_Dio_PinMode(Ultrasonic_Trig,OUTPUT);
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	8b e2       	ldi	r24, 0x2B	; 43
     63c:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinMode(Ultrasoinc_Echo,INPUT);
     640:	62 e0       	ldi	r22, 0x02	; 2
     642:	8a e2       	ldi	r24, 0x2A	; 42
     644:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinPullUpRes(Ultrasoinc_Echo,DISABLE);
     648:	62 e0       	ldi	r22, 0x02	; 2
     64a:	8a e2       	ldi	r24, 0x2A	; 42
     64c:	0e 94 45 06 	call	0xc8a	; 0xc8a <M_Dio_PinPullUpRes>
	
	M_ExtInt_Int0Init();
     650:	0e 94 ce 06 	call	0xd9c	; 0xd9c <M_ExtInt_Int0Init>
	M_Timer0_Init();
     654:	0e 94 07 07 	call	0xe0e	; 0xe0e <M_Timer0_Init>
	M_ExtInt_SetCallBack(H_HC_SR04_Distance_Cal);
     658:	85 ee       	ldi	r24, 0xE5	; 229
     65a:	92 e0       	ldi	r25, 0x02	; 2
     65c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <M_ExtInt_SetCallBack>
    M_Timer0_SetCallBack(H_HC_SR04_Time);
     660:	8f eb       	ldi	r24, 0xBF	; 191
     662:	92 e0       	ldi	r25, 0x02	; 2
     664:	0e 94 28 07 	call	0xe50	; 0xe50 <M_Timer0_SetCallBack>
     668:	08 95       	ret

0000066a <H_HC_SR04_Trig>:
}

void H_HC_SR04_Trig(void)
{
	if (!Sensor_Operation)
     66a:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <Sensor_Operation>
     66e:	81 11       	cpse	r24, r1
     670:	1b c0       	rjmp	.+54     	; 0x6a8 <H_HC_SR04_Trig+0x3e>
	{
		M_Dio_PinWrite(Ultrasonic_Trig,LOW);
     672:	62 e0       	ldi	r22, 0x02	; 2
     674:	8b e2       	ldi	r24, 0x2B	; 43
     676:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     67a:	8a e1       	ldi	r24, 0x1A	; 26
     67c:	8a 95       	dec	r24
     67e:	f1 f7       	brne	.-4      	; 0x67c <H_HC_SR04_Trig+0x12>
     680:	00 c0       	rjmp	.+0      	; 0x682 <H_HC_SR04_Trig+0x18>
		_delay_us(5);
		M_Dio_PinWrite(Ultrasonic_Trig,HIGH);
     682:	61 e0       	ldi	r22, 0x01	; 1
     684:	8b e2       	ldi	r24, 0x2B	; 43
     686:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     68a:	85 e3       	ldi	r24, 0x35	; 53
     68c:	8a 95       	dec	r24
     68e:	f1 f7       	brne	.-4      	; 0x68c <H_HC_SR04_Trig+0x22>
     690:	00 00       	nop
		_delay_us(10);
		M_Dio_PinWrite(Ultrasonic_Trig,LOW);
     692:	62 e0       	ldi	r22, 0x02	; 2
     694:	8b e2       	ldi	r24, 0x2B	; 43
     696:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     69a:	85 e3       	ldi	r24, 0x35	; 53
     69c:	8a 95       	dec	r24
     69e:	f1 f7       	brne	.-4      	; 0x69c <H_HC_SR04_Trig+0x32>
     6a0:	00 00       	nop
		_delay_us(10);
		Sensor_Operation = 1;	
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <Sensor_Operation>
     6a8:	08 95       	ret

000006aa <H_HC_SR04_Distacne>:
	}
} 

u32  H_HC_SR04_Distacne(void)
{
	H_HC_SR04_Trig();
     6aa:	0e 94 35 03 	call	0x66a	; 0x66a <H_HC_SR04_Trig>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6ae:	8f e1       	ldi	r24, 0x1F	; 31
     6b0:	9e e4       	ldi	r25, 0x4E	; 78
     6b2:	01 97       	sbiw	r24, 0x01	; 1
     6b4:	f1 f7       	brne	.-4      	; 0x6b2 <H_HC_SR04_Distacne+0x8>
     6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <H_HC_SR04_Distacne+0xe>
     6b8:	00 00       	nop
	_delay_ms(5);
	return Pulses;
     6ba:	60 91 29 01 	lds	r22, 0x0129	; 0x800129 <Pulses>
     6be:	70 91 2a 01 	lds	r23, 0x012A	; 0x80012a <Pulses+0x1>
     6c2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Pulses+0x2>
     6c6:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <Pulses+0x3>
}
     6ca:	08 95       	ret

000006cc <H_Lcd_WriteCharacter>:
	#endif
	
}

void H_Lcd_WriteCharacter(u8 Local_u8_Character)
{
     6cc:	cf 93       	push	r28
     6ce:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
	_delay_ms(5);  // This delay for the lcd MC have time to respond to my MC
	
	#elif LCD_MODE  == _4_BIT_MODE
	M_Dio_PinWrite(LCD_RS_PIN,HIGH);
     6d0:	61 e0       	ldi	r22, 0x01	; 1
     6d2:	85 e1       	ldi	r24, 0x15	; 21
     6d4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
	LCD_DATA_PORT = (Local_u8_Character & 0xF0) | (LCD_DATA_PORT & 0X0F);  // send first 4 bit of data
     6d8:	8b b3       	in	r24, 0x1b	; 27
     6da:	9c 2f       	mov	r25, r28
     6dc:	90 7f       	andi	r25, 0xF0	; 240
     6de:	8f 70       	andi	r24, 0x0F	; 15
     6e0:	89 2b       	or	r24, r25
     6e2:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     6e4:	61 e0       	ldi	r22, 0x01	; 1
     6e6:	87 e1       	ldi	r24, 0x17	; 23
     6e8:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     6ec:	8f e9       	ldi	r24, 0x9F	; 159
     6ee:	9f e0       	ldi	r25, 0x0F	; 15
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	f1 f7       	brne	.-4      	; 0x6f0 <H_Lcd_WriteCharacter+0x24>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <H_Lcd_WriteCharacter+0x2a>
     6f6:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     6f8:	62 e0       	ldi	r22, 0x02	; 2
     6fa:	87 e1       	ldi	r24, 0x17	; 23
     6fc:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     700:	8f e1       	ldi	r24, 0x1F	; 31
     702:	9e e4       	ldi	r25, 0x4E	; 78
     704:	01 97       	sbiw	r24, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <H_Lcd_WriteCharacter+0x38>
     708:	00 c0       	rjmp	.+0      	; 0x70a <H_Lcd_WriteCharacter+0x3e>
     70a:	00 00       	nop
	_delay_ms(5);
	LCD_DATA_PORT = (Local_u8_Character << 4) | (LCD_DATA_PORT & 0X0F);    // send the second 4 bit of data
     70c:	2b b3       	in	r18, 0x1b	; 27
     70e:	30 e1       	ldi	r19, 0x10	; 16
     710:	c3 9f       	mul	r28, r19
     712:	c0 01       	movw	r24, r0
     714:	11 24       	eor	r1, r1
     716:	92 2f       	mov	r25, r18
     718:	9f 70       	andi	r25, 0x0F	; 15
     71a:	89 2b       	or	r24, r25
     71c:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     71e:	61 e0       	ldi	r22, 0x01	; 1
     720:	87 e1       	ldi	r24, 0x17	; 23
     722:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     726:	8f e9       	ldi	r24, 0x9F	; 159
     728:	9f e0       	ldi	r25, 0x0F	; 15
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	f1 f7       	brne	.-4      	; 0x72a <H_Lcd_WriteCharacter+0x5e>
     72e:	00 c0       	rjmp	.+0      	; 0x730 <H_Lcd_WriteCharacter+0x64>
     730:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     732:	62 e0       	ldi	r22, 0x02	; 2
     734:	87 e1       	ldi	r24, 0x17	; 23
     736:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     73a:	8f e1       	ldi	r24, 0x1F	; 31
     73c:	9e e4       	ldi	r25, 0x4E	; 78
     73e:	01 97       	sbiw	r24, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <H_Lcd_WriteCharacter+0x72>
     742:	00 c0       	rjmp	.+0      	; 0x744 <H_Lcd_WriteCharacter+0x78>
     744:	00 00       	nop
	_delay_ms(5);
	#endif
}
     746:	cf 91       	pop	r28
     748:	08 95       	ret

0000074a <H_Lcd_WriteCommand>:

void H_Lcd_WriteCommand(u8 Local_u8_Command)
{
     74a:	cf 93       	push	r28
     74c:	c8 2f       	mov	r28, r24
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
	_delay_ms(5);  // This delay for the lcd MC have time to respond to my MC
	
	#elif LCD_MODE  == _4_BIT_MODE
	M_Dio_PinWrite(LCD_RS_PIN,LOW);
     74e:	62 e0       	ldi	r22, 0x02	; 2
     750:	85 e1       	ldi	r24, 0x15	; 21
     752:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
	LCD_DATA_PORT = (Local_u8_Command & 0xF0) | (LCD_DATA_PORT & 0X0F);  // send first 4 bit of data
     756:	8b b3       	in	r24, 0x1b	; 27
     758:	9c 2f       	mov	r25, r28
     75a:	90 7f       	andi	r25, 0xF0	; 240
     75c:	8f 70       	andi	r24, 0x0F	; 15
     75e:	89 2b       	or	r24, r25
     760:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     762:	61 e0       	ldi	r22, 0x01	; 1
     764:	87 e1       	ldi	r24, 0x17	; 23
     766:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     76a:	8f e9       	ldi	r24, 0x9F	; 159
     76c:	9f e0       	ldi	r25, 0x0F	; 15
     76e:	01 97       	sbiw	r24, 0x01	; 1
     770:	f1 f7       	brne	.-4      	; 0x76e <H_Lcd_WriteCommand+0x24>
     772:	00 c0       	rjmp	.+0      	; 0x774 <H_Lcd_WriteCommand+0x2a>
     774:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     776:	62 e0       	ldi	r22, 0x02	; 2
     778:	87 e1       	ldi	r24, 0x17	; 23
     77a:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     77e:	8f e9       	ldi	r24, 0x9F	; 159
     780:	9f e0       	ldi	r25, 0x0F	; 15
     782:	01 97       	sbiw	r24, 0x01	; 1
     784:	f1 f7       	brne	.-4      	; 0x782 <H_Lcd_WriteCommand+0x38>
     786:	00 c0       	rjmp	.+0      	; 0x788 <H_Lcd_WriteCommand+0x3e>
     788:	00 00       	nop
	_delay_ms(1);
	LCD_DATA_PORT = (Local_u8_Command << 4) | (LCD_DATA_PORT & 0X0F);    // send the second 4 bit of data
     78a:	2b b3       	in	r18, 0x1b	; 27
     78c:	30 e1       	ldi	r19, 0x10	; 16
     78e:	c3 9f       	mul	r28, r19
     790:	c0 01       	movw	r24, r0
     792:	11 24       	eor	r1, r1
     794:	92 2f       	mov	r25, r18
     796:	9f 70       	andi	r25, 0x0F	; 15
     798:	89 2b       	or	r24, r25
     79a:	8b bb       	out	0x1b, r24	; 27
	M_Dio_PinWrite(LCD_EN_PIN,HIGH);
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	87 e1       	ldi	r24, 0x17	; 23
     7a0:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     7a4:	8f e9       	ldi	r24, 0x9F	; 159
     7a6:	9f e0       	ldi	r25, 0x0F	; 15
     7a8:	01 97       	sbiw	r24, 0x01	; 1
     7aa:	f1 f7       	brne	.-4      	; 0x7a8 <H_Lcd_WriteCommand+0x5e>
     7ac:	00 c0       	rjmp	.+0      	; 0x7ae <H_Lcd_WriteCommand+0x64>
     7ae:	00 00       	nop
	_delay_ms(1);
	M_Dio_PinWrite(LCD_EN_PIN,LOW);
     7b0:	62 e0       	ldi	r22, 0x02	; 2
     7b2:	87 e1       	ldi	r24, 0x17	; 23
     7b4:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     7b8:	8f e1       	ldi	r24, 0x1F	; 31
     7ba:	9e e4       	ldi	r25, 0x4E	; 78
     7bc:	01 97       	sbiw	r24, 0x01	; 1
     7be:	f1 f7       	brne	.-4      	; 0x7bc <H_Lcd_WriteCommand+0x72>
     7c0:	00 c0       	rjmp	.+0      	; 0x7c2 <H_Lcd_WriteCommand+0x78>
     7c2:	00 00       	nop
	_delay_ms(5);
	#endif
}
     7c4:	cf 91       	pop	r28
     7c6:	08 95       	ret

000007c8 <H_Lcd_Init>:
	H_Lcd_WriteCommand(LCD_CLEAR);
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
	
	#elif  LCD_MODE  == _4_BIT_MODE
	
	M_Dio_PinMode(LCD_DATA4_PIN,OUTPUT);
     7c8:	61 e0       	ldi	r22, 0x01	; 1
     7ca:	8e e0       	ldi	r24, 0x0E	; 14
     7cc:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA5_PIN,OUTPUT);
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	8f e0       	ldi	r24, 0x0F	; 15
     7d4:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA6_PIN,OUTPUT);
     7d8:	61 e0       	ldi	r22, 0x01	; 1
     7da:	80 e1       	ldi	r24, 0x10	; 16
     7dc:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinMode(LCD_DATA7_PIN,OUTPUT);
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	81 e1       	ldi	r24, 0x11	; 17
     7e4:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RS_PIN,OUTPUT);
     7e8:	61 e0       	ldi	r22, 0x01	; 1
     7ea:	85 e1       	ldi	r24, 0x15	; 21
     7ec:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinMode(LCD_RW_PIN,OUTPUT);
     7f0:	61 e0       	ldi	r22, 0x01	; 1
     7f2:	86 e1       	ldi	r24, 0x16	; 22
     7f4:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinMode(LCD_EN_PIN,OUTPUT);
     7f8:	61 e0       	ldi	r22, 0x01	; 1
     7fa:	87 e1       	ldi	r24, 0x17	; 23
     7fc:	0e 94 ef 04 	call	0x9de	; 0x9de <M_Dio_PinMode>
	M_Dio_PinWrite(LCD_RW_PIN,LOW);	 // This statement is optional to write, by default RW it is low
     800:	62 e0       	ldi	r22, 0x02	; 2
     802:	86 e1       	ldi	r24, 0x16	; 22
     804:	0e 94 78 05 	call	0xaf0	; 0xaf0 <M_Dio_PinWrite>
     808:	2f ef       	ldi	r18, 0xFF	; 255
     80a:	83 ed       	ldi	r24, 0xD3	; 211
     80c:	90 e3       	ldi	r25, 0x30	; 48
     80e:	21 50       	subi	r18, 0x01	; 1
     810:	80 40       	sbci	r24, 0x00	; 0
     812:	90 40       	sbci	r25, 0x00	; 0
     814:	e1 f7       	brne	.-8      	; 0x80e <H_Lcd_Init+0x46>
     816:	00 c0       	rjmp	.+0      	; 0x818 <H_Lcd_Init+0x50>
     818:	00 00       	nop
	_delay_ms(1000);
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_1);
     81a:	83 e3       	ldi	r24, 0x33	; 51
     81c:	0e 94 a5 03 	call	0x74a	; 0x74a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_2);
     820:	82 e3       	ldi	r24, 0x32	; 50
     822:	0e 94 a5 03 	call	0x74a	; 0x74a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_4_BIT_MODE_3);
     826:	88 e2       	ldi	r24, 0x28	; 40
     828:	0e 94 a5 03 	call	0x74a	; 0x74a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_DISPLAY_ON_CURSUR_OFF);
     82c:	8c e0       	ldi	r24, 0x0C	; 12
     82e:	0e 94 a5 03 	call	0x74a	; 0x74a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_CLEAR);
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	0e 94 a5 03 	call	0x74a	; 0x74a <H_Lcd_WriteCommand>
	H_Lcd_WriteCommand(LCD_RETURN_HOME);
     838:	82 e0       	ldi	r24, 0x02	; 2
     83a:	0e 94 a5 03 	call	0x74a	; 0x74a <H_Lcd_WriteCommand>
     83e:	08 95       	ret

00000840 <H_Lcd_WriteString>:
	#endif
}


void H_Lcd_WriteString(u8* Local_u8_Ptr)
{
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	fc 01       	movw	r30, r24
	u8 Local_u8_Counter=0;
	while(Local_u8_Ptr[Local_u8_Counter] != NULL_)
     848:	80 81       	ld	r24, Z
     84a:	88 23       	and	r24, r24
     84c:	59 f0       	breq	.+22     	; 0x864 <__stack+0x5>
     84e:	8f 01       	movw	r16, r30
     850:	c0 e0       	ldi	r28, 0x00	; 0
	{
		H_Lcd_WriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
     852:	0e 94 66 03 	call	0x6cc	; 0x6cc <H_Lcd_WriteCharacter>
		Local_u8_Counter++;
     856:	cf 5f       	subi	r28, 0xFF	; 255


void H_Lcd_WriteString(u8* Local_u8_Ptr)
{
	u8 Local_u8_Counter=0;
	while(Local_u8_Ptr[Local_u8_Counter] != NULL_)
     858:	f8 01       	movw	r30, r16
     85a:	ec 0f       	add	r30, r28
     85c:	f1 1d       	adc	r31, r1
     85e:	80 81       	ld	r24, Z
     860:	81 11       	cpse	r24, r1
     862:	f7 cf       	rjmp	.-18     	; 0x852 <H_Lcd_WriteString+0x12>
	{
		H_Lcd_WriteCharacter(Local_u8_Ptr[Local_u8_Counter]);
		Local_u8_Counter++;
	}
	
}
     864:	cf 91       	pop	r28
     866:	1f 91       	pop	r17
     868:	0f 91       	pop	r16
     86a:	08 95       	ret

0000086c <H_Lcd_WriteNumber>:


void H_Lcd_WriteNumber(s32 Local_s32_Number)
{
     86c:	4f 92       	push	r4
     86e:	5f 92       	push	r5
     870:	6f 92       	push	r6
     872:	7f 92       	push	r7
     874:	af 92       	push	r10
     876:	bf 92       	push	r11
     878:	cf 92       	push	r12
     87a:	df 92       	push	r13
     87c:	ef 92       	push	r14
     87e:	ff 92       	push	r15
     880:	1f 93       	push	r17
     882:	cf 93       	push	r28
     884:	df 93       	push	r29
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	2a 97       	sbiw	r28, 0x0a	; 10
     88c:	0f b6       	in	r0, 0x3f	; 63
     88e:	f8 94       	cli
     890:	de bf       	out	0x3e, r29	; 62
     892:	0f be       	out	0x3f, r0	; 63
     894:	cd bf       	out	0x3d, r28	; 61
     896:	6b 01       	movw	r12, r22
     898:	7c 01       	movw	r14, r24
	u8 Local_u8_Arr[10] = {0};
     89a:	fe 01       	movw	r30, r28
     89c:	31 96       	adiw	r30, 0x01	; 1
     89e:	8a e0       	ldi	r24, 0x0A	; 10
     8a0:	df 01       	movw	r26, r30
     8a2:	1d 92       	st	X+, r1
     8a4:	8a 95       	dec	r24
     8a6:	e9 f7       	brne	.-6      	; 0x8a2 <H_Lcd_WriteNumber+0x36>
	s8 Local_s8_Counter = 0;
	u8 Local_u8_Digit   = 0;
	
	if(Local_s32_Number == 0)
     8a8:	c1 14       	cp	r12, r1
     8aa:	d1 04       	cpc	r13, r1
     8ac:	e1 04       	cpc	r14, r1
     8ae:	f1 04       	cpc	r15, r1
     8b0:	21 f4       	brne	.+8      	; 0x8ba <H_Lcd_WriteNumber+0x4e>
	{
		H_Lcd_WriteCharacter('0');
     8b2:	80 e3       	ldi	r24, 0x30	; 48
     8b4:	0e 94 66 03 	call	0x6cc	; 0x6cc <H_Lcd_WriteCharacter>
     8b8:	48 c0       	rjmp	.+144    	; 0x94a <H_Lcd_WriteNumber+0xde>
	}
	else
	{
		if (Local_s32_Number < 0)
     8ba:	ff 20       	and	r15, r15
     8bc:	84 f4       	brge	.+32     	; 0x8de <H_Lcd_WriteNumber+0x72>
		{
			H_Lcd_WriteCharacter('-');
     8be:	8d e2       	ldi	r24, 0x2D	; 45
     8c0:	0e 94 66 03 	call	0x6cc	; 0x6cc <H_Lcd_WriteCharacter>
			Local_s32_Number = Local_s32_Number * -1;
     8c4:	f0 94       	com	r15
     8c6:	e0 94       	com	r14
     8c8:	d0 94       	com	r13
     8ca:	c0 94       	com	r12
     8cc:	c1 1c       	adc	r12, r1
     8ce:	d1 1c       	adc	r13, r1
     8d0:	e1 1c       	adc	r14, r1
     8d2:	f1 1c       	adc	r15, r1
		}
		
		while (Local_s32_Number != 0)
     8d4:	c1 14       	cp	r12, r1
     8d6:	d1 04       	cpc	r13, r1
     8d8:	e1 04       	cpc	r14, r1
     8da:	f1 04       	cpc	r15, r1
     8dc:	b1 f1       	breq	.+108    	; 0x94a <H_Lcd_WriteNumber+0xde>
	
}


void H_Lcd_WriteNumber(s32 Local_s32_Number)
{
     8de:	10 e0       	ldi	r17, 0x00	; 0
		}
		
		while (Local_s32_Number != 0)
		{
			Local_u8_Digit = Local_s32_Number % 10;
			Local_u8_Arr[Local_s8_Counter] =  Local_u8_Digit;
     8e0:	0f 2e       	mov	r0, r31
     8e2:	fa e0       	ldi	r31, 0x0A	; 10
     8e4:	4f 2e       	mov	r4, r31
     8e6:	51 2c       	mov	r5, r1
     8e8:	61 2c       	mov	r6, r1
     8ea:	71 2c       	mov	r7, r1
     8ec:	f0 2d       	mov	r31, r0
     8ee:	01 c0       	rjmp	.+2      	; 0x8f2 <H_Lcd_WriteNumber+0x86>
			Local_s8_Counter++;
     8f0:	18 2f       	mov	r17, r24
		}
		
		while (Local_s32_Number != 0)
		{
			Local_u8_Digit = Local_s32_Number % 10;
			Local_u8_Arr[Local_s8_Counter] =  Local_u8_Digit;
     8f2:	aa 24       	eor	r10, r10
     8f4:	a3 94       	inc	r10
     8f6:	b1 2c       	mov	r11, r1
     8f8:	ac 0e       	add	r10, r28
     8fa:	bd 1e       	adc	r11, r29
     8fc:	a1 0e       	add	r10, r17
     8fe:	b1 1c       	adc	r11, r1
     900:	17 fd       	sbrc	r17, 7
     902:	ba 94       	dec	r11
     904:	c7 01       	movw	r24, r14
     906:	b6 01       	movw	r22, r12
     908:	a3 01       	movw	r20, r6
     90a:	92 01       	movw	r18, r4
     90c:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__divmodsi4>
     910:	f5 01       	movw	r30, r10
     912:	60 83       	st	Z, r22
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	81 0f       	add	r24, r17
			Local_s8_Counter++;
			Local_s32_Number = Local_s32_Number / 10;
     918:	c2 2e       	mov	r12, r18
     91a:	d3 2e       	mov	r13, r19
     91c:	e4 2e       	mov	r14, r20
     91e:	f5 2e       	mov	r15, r21
		{
			H_Lcd_WriteCharacter('-');
			Local_s32_Number = Local_s32_Number * -1;
		}
		
		while (Local_s32_Number != 0)
     920:	c1 14       	cp	r12, r1
     922:	d1 04       	cpc	r13, r1
     924:	e1 04       	cpc	r14, r1
     926:	f1 04       	cpc	r15, r1
     928:	19 f7       	brne	.-58     	; 0x8f0 <H_Lcd_WriteNumber+0x84>
			Local_u8_Arr[Local_s8_Counter] =  Local_u8_Digit;
			Local_s8_Counter++;
			Local_s32_Number = Local_s32_Number / 10;
		}
		Local_s8_Counter--;
		while (Local_s8_Counter >= 0)
     92a:	11 23       	and	r17, r17
     92c:	74 f0       	brlt	.+28     	; 0x94a <H_Lcd_WriteNumber+0xde>
		{
			H_Lcd_WriteCharacter(Local_u8_Arr[Local_s8_Counter] + 48);
     92e:	e1 e0       	ldi	r30, 0x01	; 1
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	ec 0f       	add	r30, r28
     934:	fd 1f       	adc	r31, r29
     936:	e1 0f       	add	r30, r17
     938:	f1 1d       	adc	r31, r1
     93a:	17 fd       	sbrc	r17, 7
     93c:	fa 95       	dec	r31
     93e:	80 81       	ld	r24, Z
     940:	80 5d       	subi	r24, 0xD0	; 208
     942:	0e 94 66 03 	call	0x6cc	; 0x6cc <H_Lcd_WriteCharacter>
     946:	11 50       	subi	r17, 0x01	; 1
			Local_u8_Arr[Local_s8_Counter] =  Local_u8_Digit;
			Local_s8_Counter++;
			Local_s32_Number = Local_s32_Number / 10;
		}
		Local_s8_Counter--;
		while (Local_s8_Counter >= 0)
     948:	92 f7       	brpl	.-28     	; 0x92e <H_Lcd_WriteNumber+0xc2>
			Local_s8_Counter--;
		}
		
	}
	
}
     94a:	2a 96       	adiw	r28, 0x0a	; 10
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	df 91       	pop	r29
     958:	cf 91       	pop	r28
     95a:	1f 91       	pop	r17
     95c:	ff 90       	pop	r15
     95e:	ef 90       	pop	r14
     960:	df 90       	pop	r13
     962:	cf 90       	pop	r12
     964:	bf 90       	pop	r11
     966:	af 90       	pop	r10
     968:	7f 90       	pop	r7
     96a:	6f 90       	pop	r6
     96c:	5f 90       	pop	r5
     96e:	4f 90       	pop	r4
     970:	08 95       	ret

00000972 <H_Lcd_Clr>:


void H_Lcd_Clr(void)
{
	H_Lcd_WriteCommand(LCD_CLEAR);
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	0e 94 a5 03 	call	0x74a	; 0x74a <H_Lcd_WriteCommand>
     978:	08 95       	ret

0000097a <H_Lcd_GoTo>:
}


void H_Lcd_GoTo(u8 Local_u8_Row,u8 Local_u8_Col)
{
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29
     97e:	00 d0       	rcall	.+0      	; 0x980 <H_Lcd_GoTo+0x6>
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8_Arr[2] = {0x80, 0xC0};   // 0X80  &  0XC0 command from lcd datasheet
     984:	90 e8       	ldi	r25, 0x80	; 128
     986:	99 83       	std	Y+1, r25	; 0x01
     988:	90 ec       	ldi	r25, 0xC0	; 192
     98a:	9a 83       	std	Y+2, r25	; 0x02
	H_Lcd_WriteCommand(Local_u8_Arr[Local_u8_Row] + Local_u8_Col);
     98c:	fe 01       	movw	r30, r28
     98e:	e8 0f       	add	r30, r24
     990:	f1 1d       	adc	r31, r1
     992:	81 81       	ldd	r24, Z+1	; 0x01
     994:	86 0f       	add	r24, r22
     996:	0e 94 a5 03 	call	0x74a	; 0x74a <H_Lcd_WriteCommand>
}
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	df 91       	pop	r29
     9a0:	cf 91       	pop	r28
     9a2:	08 95       	ret

000009a4 <H_Servo_Init>:

#include "Servo.h"

void H_Servo_Init(void)
{
	M_Timer1_Pwm1Init();
     9a4:	0e 94 54 07 	call	0xea8	; 0xea8 <M_Timer1_Pwm1Init>
	M_Timer1_Pwm1SetFrequancy(50);
     9a8:	62 e3       	ldi	r22, 0x32	; 50
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	80 e0       	ldi	r24, 0x00	; 0
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	0e 94 68 07 	call	0xed0	; 0xed0 <M_Timer1_Pwm1SetFrequancy>
     9b4:	08 95       	ret

000009b6 <H_Servo_SetAngel>:
{
	u8 Local_u8_ServoDutyCycle;
	
	Local_u8_ServoDutyCycle = ((Local_u8_Angel * 5 )/180) + 5;
	
	M_Timer1_Pwm1SetDutyCycle(Local_u8_ServoDutyCycle);
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	9c 01       	movw	r18, r24
     9ba:	22 0f       	add	r18, r18
     9bc:	33 1f       	adc	r19, r19
     9be:	22 0f       	add	r18, r18
     9c0:	33 1f       	adc	r19, r19
     9c2:	82 0f       	add	r24, r18
     9c4:	93 1f       	adc	r25, r19
     9c6:	64 eb       	ldi	r22, 0xB4	; 180
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e 94 1c 08 	call	0x1038	; 0x1038 <__divmodhi4>
     9ce:	85 e0       	ldi	r24, 0x05	; 5
     9d0:	86 0f       	add	r24, r22
     9d2:	0e 94 75 07 	call	0xeea	; 0xeea <M_Timer1_Pwm1SetDutyCycle>
     9d6:	08 95       	ret

000009d8 <H_Servo_Start>:
}

void H_Servo_Start(void)
{
	M_Timer1_Pwm1Start();
     9d8:	0e 94 8c 07 	call	0xf18	; 0xf18 <M_Timer1_Pwm1Start>
     9dc:	08 95       	ret

000009de <M_Dio_PinMode>:
	switch(Local_u8_Port)
	{
		case A: PORTA = Local_u8_Value;  break;
		case B: PORTB = Local_u8_Value;  break;
		case C: PORTC = Local_u8_Value;  break;
		case D: PORTD = Local_u8_Value;  break;
     9de:	9d ec       	ldi	r25, 0xCD	; 205
     9e0:	89 9f       	mul	r24, r25
     9e2:	91 2d       	mov	r25, r1
     9e4:	11 24       	eor	r1, r1
     9e6:	29 2f       	mov	r18, r25
     9e8:	26 95       	lsr	r18
     9ea:	26 95       	lsr	r18
     9ec:	26 95       	lsr	r18
     9ee:	22 0f       	add	r18, r18
     9f0:	32 2f       	mov	r19, r18
     9f2:	33 0f       	add	r19, r19
     9f4:	33 0f       	add	r19, r19
     9f6:	23 0f       	add	r18, r19
     9f8:	82 1b       	sub	r24, r18
     9fa:	28 2f       	mov	r18, r24
     9fc:	96 95       	lsr	r25
     9fe:	96 95       	lsr	r25
     a00:	96 95       	lsr	r25
     a02:	61 30       	cpi	r22, 0x01	; 1
     a04:	19 f0       	breq	.+6      	; 0xa0c <M_Dio_PinMode+0x2e>
     a06:	62 30       	cpi	r22, 0x02	; 2
     a08:	c1 f1       	breq	.+112    	; 0xa7a <M_Dio_PinMode+0x9c>
     a0a:	08 95       	ret
     a0c:	92 30       	cpi	r25, 0x02	; 2
     a0e:	a1 f0       	breq	.+40     	; 0xa38 <M_Dio_PinMode+0x5a>
     a10:	18 f4       	brcc	.+6      	; 0xa18 <M_Dio_PinMode+0x3a>
     a12:	91 30       	cpi	r25, 0x01	; 1
     a14:	31 f0       	breq	.+12     	; 0xa22 <M_Dio_PinMode+0x44>
     a16:	08 95       	ret
     a18:	93 30       	cpi	r25, 0x03	; 3
     a1a:	c9 f0       	breq	.+50     	; 0xa4e <M_Dio_PinMode+0x70>
     a1c:	94 30       	cpi	r25, 0x04	; 4
     a1e:	11 f1       	breq	.+68     	; 0xa64 <M_Dio_PinMode+0x86>
     a20:	08 95       	ret
     a22:	3a b3       	in	r19, 0x1a	; 26
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <M_Dio_PinMode+0x50>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	2a 95       	dec	r18
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <M_Dio_PinMode+0x4c>
     a32:	83 2b       	or	r24, r19
     a34:	8a bb       	out	0x1a, r24	; 26
     a36:	08 95       	ret
     a38:	37 b3       	in	r19, 0x17	; 23
     a3a:	81 e0       	ldi	r24, 0x01	; 1
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	02 c0       	rjmp	.+4      	; 0xa44 <M_Dio_PinMode+0x66>
     a40:	88 0f       	add	r24, r24
     a42:	99 1f       	adc	r25, r25
     a44:	2a 95       	dec	r18
     a46:	e2 f7       	brpl	.-8      	; 0xa40 <M_Dio_PinMode+0x62>
     a48:	83 2b       	or	r24, r19
     a4a:	87 bb       	out	0x17, r24	; 23
     a4c:	08 95       	ret
     a4e:	34 b3       	in	r19, 0x14	; 20
     a50:	81 e0       	ldi	r24, 0x01	; 1
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <M_Dio_PinMode+0x7c>
     a56:	88 0f       	add	r24, r24
     a58:	99 1f       	adc	r25, r25
     a5a:	2a 95       	dec	r18
     a5c:	e2 f7       	brpl	.-8      	; 0xa56 <M_Dio_PinMode+0x78>
     a5e:	83 2b       	or	r24, r19
     a60:	84 bb       	out	0x14, r24	; 20
     a62:	08 95       	ret
     a64:	31 b3       	in	r19, 0x11	; 17
     a66:	81 e0       	ldi	r24, 0x01	; 1
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	02 c0       	rjmp	.+4      	; 0xa70 <M_Dio_PinMode+0x92>
     a6c:	88 0f       	add	r24, r24
     a6e:	99 1f       	adc	r25, r25
     a70:	2a 95       	dec	r18
     a72:	e2 f7       	brpl	.-8      	; 0xa6c <M_Dio_PinMode+0x8e>
     a74:	83 2b       	or	r24, r19
     a76:	81 bb       	out	0x11, r24	; 17
     a78:	08 95       	ret
     a7a:	92 30       	cpi	r25, 0x02	; 2
     a7c:	a9 f0       	breq	.+42     	; 0xaa8 <M_Dio_PinMode+0xca>
     a7e:	18 f4       	brcc	.+6      	; 0xa86 <M_Dio_PinMode+0xa8>
     a80:	91 30       	cpi	r25, 0x01	; 1
     a82:	31 f0       	breq	.+12     	; 0xa90 <M_Dio_PinMode+0xb2>
     a84:	08 95       	ret
     a86:	93 30       	cpi	r25, 0x03	; 3
     a88:	d9 f0       	breq	.+54     	; 0xac0 <M_Dio_PinMode+0xe2>
     a8a:	94 30       	cpi	r25, 0x04	; 4
     a8c:	29 f1       	breq	.+74     	; 0xad8 <M_Dio_PinMode+0xfa>
     a8e:	08 95       	ret
     a90:	3a b3       	in	r19, 0x1a	; 26
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	02 c0       	rjmp	.+4      	; 0xa9c <M_Dio_PinMode+0xbe>
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	2a 95       	dec	r18
     a9e:	e2 f7       	brpl	.-8      	; 0xa98 <M_Dio_PinMode+0xba>
     aa0:	80 95       	com	r24
     aa2:	83 23       	and	r24, r19
     aa4:	8a bb       	out	0x1a, r24	; 26
     aa6:	08 95       	ret
     aa8:	37 b3       	in	r19, 0x17	; 23
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <M_Dio_PinMode+0xd6>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	2a 95       	dec	r18
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <M_Dio_PinMode+0xd2>
     ab8:	80 95       	com	r24
     aba:	83 23       	and	r24, r19
     abc:	87 bb       	out	0x17, r24	; 23
     abe:	08 95       	ret
     ac0:	34 b3       	in	r19, 0x14	; 20
     ac2:	81 e0       	ldi	r24, 0x01	; 1
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	02 c0       	rjmp	.+4      	; 0xacc <M_Dio_PinMode+0xee>
     ac8:	88 0f       	add	r24, r24
     aca:	99 1f       	adc	r25, r25
     acc:	2a 95       	dec	r18
     ace:	e2 f7       	brpl	.-8      	; 0xac8 <M_Dio_PinMode+0xea>
     ad0:	80 95       	com	r24
     ad2:	83 23       	and	r24, r19
     ad4:	84 bb       	out	0x14, r24	; 20
     ad6:	08 95       	ret
     ad8:	31 b3       	in	r19, 0x11	; 17
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	02 c0       	rjmp	.+4      	; 0xae4 <M_Dio_PinMode+0x106>
     ae0:	88 0f       	add	r24, r24
     ae2:	99 1f       	adc	r25, r25
     ae4:	2a 95       	dec	r18
     ae6:	e2 f7       	brpl	.-8      	; 0xae0 <M_Dio_PinMode+0x102>
     ae8:	80 95       	com	r24
     aea:	83 23       	and	r24, r19
     aec:	81 bb       	out	0x11, r24	; 17
     aee:	08 95       	ret

00000af0 <M_Dio_PinWrite>:
     af0:	9d ec       	ldi	r25, 0xCD	; 205
     af2:	89 9f       	mul	r24, r25
     af4:	91 2d       	mov	r25, r1
     af6:	11 24       	eor	r1, r1
     af8:	29 2f       	mov	r18, r25
     afa:	26 95       	lsr	r18
     afc:	26 95       	lsr	r18
     afe:	26 95       	lsr	r18
     b00:	22 0f       	add	r18, r18
     b02:	32 2f       	mov	r19, r18
     b04:	33 0f       	add	r19, r19
     b06:	33 0f       	add	r19, r19
     b08:	23 0f       	add	r18, r19
     b0a:	82 1b       	sub	r24, r18
     b0c:	28 2f       	mov	r18, r24
     b0e:	96 95       	lsr	r25
     b10:	96 95       	lsr	r25
     b12:	96 95       	lsr	r25
     b14:	61 30       	cpi	r22, 0x01	; 1
     b16:	19 f0       	breq	.+6      	; 0xb1e <M_Dio_PinWrite+0x2e>
     b18:	62 30       	cpi	r22, 0x02	; 2
     b1a:	c1 f1       	breq	.+112    	; 0xb8c <M_Dio_PinWrite+0x9c>
     b1c:	08 95       	ret
     b1e:	92 30       	cpi	r25, 0x02	; 2
     b20:	a1 f0       	breq	.+40     	; 0xb4a <M_Dio_PinWrite+0x5a>
     b22:	18 f4       	brcc	.+6      	; 0xb2a <M_Dio_PinWrite+0x3a>
     b24:	91 30       	cpi	r25, 0x01	; 1
     b26:	31 f0       	breq	.+12     	; 0xb34 <M_Dio_PinWrite+0x44>
     b28:	08 95       	ret
     b2a:	93 30       	cpi	r25, 0x03	; 3
     b2c:	c9 f0       	breq	.+50     	; 0xb60 <M_Dio_PinWrite+0x70>
     b2e:	94 30       	cpi	r25, 0x04	; 4
     b30:	11 f1       	breq	.+68     	; 0xb76 <M_Dio_PinWrite+0x86>
     b32:	08 95       	ret
     b34:	3b b3       	in	r19, 0x1b	; 27
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <M_Dio_PinWrite+0x50>
     b3c:	88 0f       	add	r24, r24
     b3e:	99 1f       	adc	r25, r25
     b40:	2a 95       	dec	r18
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <M_Dio_PinWrite+0x4c>
     b44:	83 2b       	or	r24, r19
     b46:	8b bb       	out	0x1b, r24	; 27
     b48:	08 95       	ret
     b4a:	38 b3       	in	r19, 0x18	; 24
     b4c:	81 e0       	ldi	r24, 0x01	; 1
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	02 c0       	rjmp	.+4      	; 0xb56 <M_Dio_PinWrite+0x66>
     b52:	88 0f       	add	r24, r24
     b54:	99 1f       	adc	r25, r25
     b56:	2a 95       	dec	r18
     b58:	e2 f7       	brpl	.-8      	; 0xb52 <M_Dio_PinWrite+0x62>
     b5a:	83 2b       	or	r24, r19
     b5c:	88 bb       	out	0x18, r24	; 24
     b5e:	08 95       	ret
     b60:	35 b3       	in	r19, 0x15	; 21
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <M_Dio_PinWrite+0x7c>
     b68:	88 0f       	add	r24, r24
     b6a:	99 1f       	adc	r25, r25
     b6c:	2a 95       	dec	r18
     b6e:	e2 f7       	brpl	.-8      	; 0xb68 <M_Dio_PinWrite+0x78>
     b70:	83 2b       	or	r24, r19
     b72:	85 bb       	out	0x15, r24	; 21
     b74:	08 95       	ret
     b76:	32 b3       	in	r19, 0x12	; 18
     b78:	81 e0       	ldi	r24, 0x01	; 1
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	02 c0       	rjmp	.+4      	; 0xb82 <M_Dio_PinWrite+0x92>
     b7e:	88 0f       	add	r24, r24
     b80:	99 1f       	adc	r25, r25
     b82:	2a 95       	dec	r18
     b84:	e2 f7       	brpl	.-8      	; 0xb7e <M_Dio_PinWrite+0x8e>
     b86:	83 2b       	or	r24, r19
     b88:	82 bb       	out	0x12, r24	; 18
     b8a:	08 95       	ret
     b8c:	92 30       	cpi	r25, 0x02	; 2
     b8e:	a9 f0       	breq	.+42     	; 0xbba <M_Dio_PinWrite+0xca>
     b90:	18 f4       	brcc	.+6      	; 0xb98 <M_Dio_PinWrite+0xa8>
     b92:	91 30       	cpi	r25, 0x01	; 1
     b94:	31 f0       	breq	.+12     	; 0xba2 <M_Dio_PinWrite+0xb2>
     b96:	08 95       	ret
     b98:	93 30       	cpi	r25, 0x03	; 3
     b9a:	d9 f0       	breq	.+54     	; 0xbd2 <M_Dio_PinWrite+0xe2>
     b9c:	94 30       	cpi	r25, 0x04	; 4
     b9e:	29 f1       	breq	.+74     	; 0xbea <M_Dio_PinWrite+0xfa>
     ba0:	08 95       	ret
     ba2:	3b b3       	in	r19, 0x1b	; 27
     ba4:	81 e0       	ldi	r24, 0x01	; 1
     ba6:	90 e0       	ldi	r25, 0x00	; 0
     ba8:	02 c0       	rjmp	.+4      	; 0xbae <M_Dio_PinWrite+0xbe>
     baa:	88 0f       	add	r24, r24
     bac:	99 1f       	adc	r25, r25
     bae:	2a 95       	dec	r18
     bb0:	e2 f7       	brpl	.-8      	; 0xbaa <M_Dio_PinWrite+0xba>
     bb2:	80 95       	com	r24
     bb4:	83 23       	and	r24, r19
     bb6:	8b bb       	out	0x1b, r24	; 27
     bb8:	08 95       	ret
     bba:	38 b3       	in	r19, 0x18	; 24
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <M_Dio_PinWrite+0xd6>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	2a 95       	dec	r18
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <M_Dio_PinWrite+0xd2>
     bca:	80 95       	com	r24
     bcc:	83 23       	and	r24, r19
     bce:	88 bb       	out	0x18, r24	; 24
     bd0:	08 95       	ret
     bd2:	35 b3       	in	r19, 0x15	; 21
     bd4:	81 e0       	ldi	r24, 0x01	; 1
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	02 c0       	rjmp	.+4      	; 0xbde <M_Dio_PinWrite+0xee>
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	2a 95       	dec	r18
     be0:	e2 f7       	brpl	.-8      	; 0xbda <M_Dio_PinWrite+0xea>
     be2:	80 95       	com	r24
     be4:	83 23       	and	r24, r19
     be6:	85 bb       	out	0x15, r24	; 21
     be8:	08 95       	ret
     bea:	32 b3       	in	r19, 0x12	; 18
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <M_Dio_PinWrite+0x106>
     bf2:	88 0f       	add	r24, r24
     bf4:	99 1f       	adc	r25, r25
     bf6:	2a 95       	dec	r18
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <M_Dio_PinWrite+0x102>
     bfa:	80 95       	com	r24
     bfc:	83 23       	and	r24, r19
     bfe:	82 bb       	out	0x12, r24	; 18
     c00:	08 95       	ret

00000c02 <M_Dio_PinRead>:
     c02:	9d ec       	ldi	r25, 0xCD	; 205
     c04:	89 9f       	mul	r24, r25
     c06:	91 2d       	mov	r25, r1
     c08:	11 24       	eor	r1, r1
     c0a:	29 2f       	mov	r18, r25
     c0c:	26 95       	lsr	r18
     c0e:	26 95       	lsr	r18
     c10:	26 95       	lsr	r18
     c12:	22 0f       	add	r18, r18
     c14:	32 2f       	mov	r19, r18
     c16:	33 0f       	add	r19, r19
     c18:	33 0f       	add	r19, r19
     c1a:	23 0f       	add	r18, r19
     c1c:	82 1b       	sub	r24, r18
     c1e:	28 2f       	mov	r18, r24
     c20:	89 2f       	mov	r24, r25
     c22:	86 95       	lsr	r24
     c24:	86 95       	lsr	r24
     c26:	86 95       	lsr	r24
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	91 f0       	breq	.+36     	; 0xc50 <M_Dio_PinRead+0x4e>
     c2c:	18 f4       	brcc	.+6      	; 0xc34 <M_Dio_PinRead+0x32>
     c2e:	81 30       	cpi	r24, 0x01	; 1
     c30:	31 f0       	breq	.+12     	; 0xc3e <M_Dio_PinRead+0x3c>
     c32:	29 c0       	rjmp	.+82     	; 0xc86 <M_Dio_PinRead+0x84>
     c34:	83 30       	cpi	r24, 0x03	; 3
     c36:	a9 f0       	breq	.+42     	; 0xc62 <M_Dio_PinRead+0x60>
     c38:	84 30       	cpi	r24, 0x04	; 4
     c3a:	e1 f0       	breq	.+56     	; 0xc74 <M_Dio_PinRead+0x72>
     c3c:	24 c0       	rjmp	.+72     	; 0xc86 <M_Dio_PinRead+0x84>
     c3e:	89 b3       	in	r24, 0x19	; 25
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	02 c0       	rjmp	.+4      	; 0xc48 <M_Dio_PinRead+0x46>
     c44:	95 95       	asr	r25
     c46:	87 95       	ror	r24
     c48:	2a 95       	dec	r18
     c4a:	e2 f7       	brpl	.-8      	; 0xc44 <M_Dio_PinRead+0x42>
     c4c:	81 70       	andi	r24, 0x01	; 1
     c4e:	08 95       	ret
     c50:	86 b3       	in	r24, 0x16	; 22
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <M_Dio_PinRead+0x58>
     c56:	95 95       	asr	r25
     c58:	87 95       	ror	r24
     c5a:	2a 95       	dec	r18
     c5c:	e2 f7       	brpl	.-8      	; 0xc56 <M_Dio_PinRead+0x54>
     c5e:	81 70       	andi	r24, 0x01	; 1
     c60:	08 95       	ret
     c62:	83 b3       	in	r24, 0x13	; 19
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	02 c0       	rjmp	.+4      	; 0xc6c <M_Dio_PinRead+0x6a>
     c68:	95 95       	asr	r25
     c6a:	87 95       	ror	r24
     c6c:	2a 95       	dec	r18
     c6e:	e2 f7       	brpl	.-8      	; 0xc68 <M_Dio_PinRead+0x66>
     c70:	81 70       	andi	r24, 0x01	; 1
     c72:	08 95       	ret
     c74:	80 b3       	in	r24, 0x10	; 16
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <M_Dio_PinRead+0x7c>
     c7a:	95 95       	asr	r25
     c7c:	87 95       	ror	r24
     c7e:	2a 95       	dec	r18
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <M_Dio_PinRead+0x78>
     c82:	81 70       	andi	r24, 0x01	; 1
     c84:	08 95       	ret
     c86:	80 e0       	ldi	r24, 0x00	; 0
     c88:	08 95       	ret

00000c8a <M_Dio_PinPullUpRes>:
	
}

void M_Dio_PinPullUpRes(u8 Local_u8_Num,u8 Local_u8_Mode)
{
	u8 Local_u8_Pin = Local_u8_Num % 10;
     c8a:	9d ec       	ldi	r25, 0xCD	; 205
     c8c:	89 9f       	mul	r24, r25
     c8e:	91 2d       	mov	r25, r1
     c90:	11 24       	eor	r1, r1
     c92:	29 2f       	mov	r18, r25
     c94:	26 95       	lsr	r18
     c96:	26 95       	lsr	r18
     c98:	26 95       	lsr	r18
     c9a:	22 0f       	add	r18, r18
     c9c:	32 2f       	mov	r19, r18
     c9e:	33 0f       	add	r19, r19
     ca0:	33 0f       	add	r19, r19
     ca2:	23 0f       	add	r18, r19
     ca4:	82 1b       	sub	r24, r18
     ca6:	28 2f       	mov	r18, r24
	u8 Local_u8_Port = Local_u8_Num / 10;
     ca8:	96 95       	lsr	r25
     caa:	96 95       	lsr	r25
     cac:	96 95       	lsr	r25
	
	switch(Local_u8_Mode)
     cae:	61 30       	cpi	r22, 0x01	; 1
     cb0:	19 f0       	breq	.+6      	; 0xcb8 <M_Dio_PinPullUpRes+0x2e>
     cb2:	62 30       	cpi	r22, 0x02	; 2
     cb4:	c1 f1       	breq	.+112    	; 0xd26 <M_Dio_PinPullUpRes+0x9c>
     cb6:	08 95       	ret
	{
		case ENABLE:
		switch(Local_u8_Port)
     cb8:	92 30       	cpi	r25, 0x02	; 2
     cba:	a1 f0       	breq	.+40     	; 0xce4 <M_Dio_PinPullUpRes+0x5a>
     cbc:	18 f4       	brcc	.+6      	; 0xcc4 <M_Dio_PinPullUpRes+0x3a>
     cbe:	91 30       	cpi	r25, 0x01	; 1
     cc0:	31 f0       	breq	.+12     	; 0xcce <M_Dio_PinPullUpRes+0x44>
     cc2:	08 95       	ret
     cc4:	93 30       	cpi	r25, 0x03	; 3
     cc6:	c9 f0       	breq	.+50     	; 0xcfa <M_Dio_PinPullUpRes+0x70>
     cc8:	94 30       	cpi	r25, 0x04	; 4
     cca:	11 f1       	breq	.+68     	; 0xd10 <M_Dio_PinPullUpRes+0x86>
     ccc:	08 95       	ret
		{
			case 1: SetBit(PORTA, Local_u8_Pin); break;
     cce:	3b b3       	in	r19, 0x1b	; 27
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <M_Dio_PinPullUpRes+0x50>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	2a 95       	dec	r18
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <M_Dio_PinPullUpRes+0x4c>
     cde:	83 2b       	or	r24, r19
     ce0:	8b bb       	out	0x1b, r24	; 27
     ce2:	08 95       	ret
			case 2: SetBit(PORTB, Local_u8_Pin); break;
     ce4:	38 b3       	in	r19, 0x18	; 24
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <M_Dio_PinPullUpRes+0x66>
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	2a 95       	dec	r18
     cf2:	e2 f7       	brpl	.-8      	; 0xcec <M_Dio_PinPullUpRes+0x62>
     cf4:	83 2b       	or	r24, r19
     cf6:	88 bb       	out	0x18, r24	; 24
     cf8:	08 95       	ret
			case 3: SetBit(PORTC, Local_u8_Pin); break;
     cfa:	35 b3       	in	r19, 0x15	; 21
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <M_Dio_PinPullUpRes+0x7c>
     d02:	88 0f       	add	r24, r24
     d04:	99 1f       	adc	r25, r25
     d06:	2a 95       	dec	r18
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <M_Dio_PinPullUpRes+0x78>
     d0a:	83 2b       	or	r24, r19
     d0c:	85 bb       	out	0x15, r24	; 21
     d0e:	08 95       	ret
			case 4: SetBit(PORTD, Local_u8_Pin); break;
     d10:	32 b3       	in	r19, 0x12	; 18
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 c0       	rjmp	.+4      	; 0xd1c <M_Dio_PinPullUpRes+0x92>
     d18:	88 0f       	add	r24, r24
     d1a:	99 1f       	adc	r25, r25
     d1c:	2a 95       	dec	r18
     d1e:	e2 f7       	brpl	.-8      	; 0xd18 <M_Dio_PinPullUpRes+0x8e>
     d20:	83 2b       	or	r24, r19
     d22:	82 bb       	out	0x12, r24	; 18
     d24:	08 95       	ret
		}
		
		break;
		
		case DISABLE:
		switch(Local_u8_Port)
     d26:	92 30       	cpi	r25, 0x02	; 2
     d28:	a9 f0       	breq	.+42     	; 0xd54 <M_Dio_PinPullUpRes+0xca>
     d2a:	18 f4       	brcc	.+6      	; 0xd32 <M_Dio_PinPullUpRes+0xa8>
     d2c:	91 30       	cpi	r25, 0x01	; 1
     d2e:	31 f0       	breq	.+12     	; 0xd3c <M_Dio_PinPullUpRes+0xb2>
     d30:	08 95       	ret
     d32:	93 30       	cpi	r25, 0x03	; 3
     d34:	d9 f0       	breq	.+54     	; 0xd6c <M_Dio_PinPullUpRes+0xe2>
     d36:	94 30       	cpi	r25, 0x04	; 4
     d38:	29 f1       	breq	.+74     	; 0xd84 <M_Dio_PinPullUpRes+0xfa>
     d3a:	08 95       	ret
		{
			case 1: ClrBit(PORTA, Local_u8_Pin); break;
     d3c:	3b b3       	in	r19, 0x1b	; 27
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	02 c0       	rjmp	.+4      	; 0xd48 <M_Dio_PinPullUpRes+0xbe>
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	2a 95       	dec	r18
     d4a:	e2 f7       	brpl	.-8      	; 0xd44 <M_Dio_PinPullUpRes+0xba>
     d4c:	80 95       	com	r24
     d4e:	83 23       	and	r24, r19
     d50:	8b bb       	out	0x1b, r24	; 27
     d52:	08 95       	ret
			case 2: ClrBit(PORTB, Local_u8_Pin); break;
     d54:	38 b3       	in	r19, 0x18	; 24
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <M_Dio_PinPullUpRes+0xd6>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	2a 95       	dec	r18
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <M_Dio_PinPullUpRes+0xd2>
     d64:	80 95       	com	r24
     d66:	83 23       	and	r24, r19
     d68:	88 bb       	out	0x18, r24	; 24
     d6a:	08 95       	ret
			case 3: ClrBit(PORTC, Local_u8_Pin); break;
     d6c:	35 b3       	in	r19, 0x15	; 21
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 c0       	rjmp	.+4      	; 0xd78 <M_Dio_PinPullUpRes+0xee>
     d74:	88 0f       	add	r24, r24
     d76:	99 1f       	adc	r25, r25
     d78:	2a 95       	dec	r18
     d7a:	e2 f7       	brpl	.-8      	; 0xd74 <M_Dio_PinPullUpRes+0xea>
     d7c:	80 95       	com	r24
     d7e:	83 23       	and	r24, r19
     d80:	85 bb       	out	0x15, r24	; 21
     d82:	08 95       	ret
			case 4: ClrBit(PORTD, Local_u8_Pin); break;
     d84:	32 b3       	in	r19, 0x12	; 18
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	02 c0       	rjmp	.+4      	; 0xd90 <M_Dio_PinPullUpRes+0x106>
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	2a 95       	dec	r18
     d92:	e2 f7       	brpl	.-8      	; 0xd8c <M_Dio_PinPullUpRes+0x102>
     d94:	80 95       	com	r24
     d96:	83 23       	and	r24, r19
     d98:	82 bb       	out	0x12, r24	; 18
     d9a:	08 95       	ret

00000d9c <M_ExtInt_Int0Init>:
	SetBit(MCUCR,1);
	#elif  SENSE_CONTROL    ==    FAILLING_EDGE
	ClrBit(MCUCR,0);
	SetBit(MCUCR,1);
	#elif  SENSE_CONTROL    ==    LOGICAL_CHANGE
	SetBit(MCUCR,0);
     d9c:	85 b7       	in	r24, 0x35	; 53
     d9e:	81 60       	ori	r24, 0x01	; 1
     da0:	85 bf       	out	0x35, r24	; 53
	ClrBit(MCUCR,1);
     da2:	85 b7       	in	r24, 0x35	; 53
     da4:	8d 7f       	andi	r24, 0xFD	; 253
     da6:	85 bf       	out	0x35, r24	; 53
	#elif  SENSE_CONTROL    ==    LOW_LEVEL
	ClrBit(MCUCR,0);
	ClrBit(MCUCR,1);
	#endif
	SetBit(GICR,6);     // to enable local  interrupt
     da8:	8b b7       	in	r24, 0x3b	; 59
     daa:	80 64       	ori	r24, 0x40	; 64
     dac:	8b bf       	out	0x3b, r24	; 59
	SetBit(SREG,7);     // to enable global interrupt
     dae:	8f b7       	in	r24, 0x3f	; 63
     db0:	80 68       	ori	r24, 0x80	; 128
     db2:	8f bf       	out	0x3f, r24	; 63
     db4:	08 95       	ret

00000db6 <M_ExtInt_SetCallBack>:
}

void M_ExtInt_SetCallBack(void (*Ptr)(void))
{
	CallBack_INT = Ptr;
     db6:	90 93 2e 01 	sts	0x012E, r25	; 0x80012e <CallBack_INT+0x1>
     dba:	80 93 2d 01 	sts	0x012D, r24	; 0x80012d <CallBack_INT>
     dbe:	08 95       	ret

00000dc0 <__vector_1>:
}

ISR(INT0_vect)
{
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	2f 93       	push	r18
     dcc:	3f 93       	push	r19
     dce:	4f 93       	push	r20
     dd0:	5f 93       	push	r21
     dd2:	6f 93       	push	r22
     dd4:	7f 93       	push	r23
     dd6:	8f 93       	push	r24
     dd8:	9f 93       	push	r25
     dda:	af 93       	push	r26
     ddc:	bf 93       	push	r27
     dde:	ef 93       	push	r30
     de0:	ff 93       	push	r31
	CallBack_INT();
     de2:	e0 91 2d 01 	lds	r30, 0x012D	; 0x80012d <CallBack_INT>
     de6:	f0 91 2e 01 	lds	r31, 0x012E	; 0x80012e <CallBack_INT+0x1>
     dea:	09 95       	icall
     dec:	ff 91       	pop	r31
     dee:	ef 91       	pop	r30
     df0:	bf 91       	pop	r27
     df2:	af 91       	pop	r26
     df4:	9f 91       	pop	r25
     df6:	8f 91       	pop	r24
     df8:	7f 91       	pop	r23
     dfa:	6f 91       	pop	r22
     dfc:	5f 91       	pop	r21
     dfe:	4f 91       	pop	r20
     e00:	3f 91       	pop	r19
     e02:	2f 91       	pop	r18
     e04:	0f 90       	pop	r0
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	0f 90       	pop	r0
     e0a:	1f 90       	pop	r1
     e0c:	18 95       	reti

00000e0e <M_Timer0_Init>:
	M_Timer0_Start();
}

void M_Timer0_Pwm0Stop(void)
{
	M_Timer0_Stop();
     e0e:	83 b7       	in	r24, 0x33	; 51
     e10:	87 7f       	andi	r24, 0xF7	; 247
     e12:	83 bf       	out	0x33, r24	; 51
     e14:	83 b7       	in	r24, 0x33	; 51
     e16:	8f 7b       	andi	r24, 0xBF	; 191
     e18:	83 bf       	out	0x33, r24	; 51
     e1a:	89 b7       	in	r24, 0x39	; 57
     e1c:	81 60       	ori	r24, 0x01	; 1
     e1e:	89 bf       	out	0x39, r24	; 57
     e20:	8f b7       	in	r24, 0x3f	; 63
     e22:	80 68       	ori	r24, 0x80	; 128
     e24:	8f bf       	out	0x3f, r24	; 63
     e26:	08 95       	ret

00000e28 <M_Timer0_Start>:
     e28:	83 b7       	in	r24, 0x33	; 51
     e2a:	81 60       	ori	r24, 0x01	; 1
     e2c:	83 bf       	out	0x33, r24	; 51
     e2e:	83 b7       	in	r24, 0x33	; 51
     e30:	8d 7f       	andi	r24, 0xFD	; 253
     e32:	83 bf       	out	0x33, r24	; 51
     e34:	83 b7       	in	r24, 0x33	; 51
     e36:	8b 7f       	andi	r24, 0xFB	; 251
     e38:	83 bf       	out	0x33, r24	; 51
     e3a:	08 95       	ret

00000e3c <M_Timer0_Stop>:
     e3c:	83 b7       	in	r24, 0x33	; 51
     e3e:	8e 7f       	andi	r24, 0xFE	; 254
     e40:	83 bf       	out	0x33, r24	; 51
     e42:	83 b7       	in	r24, 0x33	; 51
     e44:	8d 7f       	andi	r24, 0xFD	; 253
     e46:	83 bf       	out	0x33, r24	; 51
     e48:	83 b7       	in	r24, 0x33	; 51
     e4a:	8b 7f       	andi	r24, 0xFB	; 251
     e4c:	83 bf       	out	0x33, r24	; 51
     e4e:	08 95       	ret

00000e50 <M_Timer0_SetCallBack>:
}


void M_Timer0_SetCallBack(void (*Ptr)(void))
{
	CallBack_T0 = Ptr;
     e50:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <CallBack_T0+0x1>
     e54:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <CallBack_T0>
     e58:	08 95       	ret

00000e5a <__vector_11>:
}

#if   TIMER0_MODE   ==   NORMAL_MODE
ISR(TIMER0_OVF_vect)
{
     e5a:	1f 92       	push	r1
     e5c:	0f 92       	push	r0
     e5e:	0f b6       	in	r0, 0x3f	; 63
     e60:	0f 92       	push	r0
     e62:	11 24       	eor	r1, r1
     e64:	2f 93       	push	r18
     e66:	3f 93       	push	r19
     e68:	4f 93       	push	r20
     e6a:	5f 93       	push	r21
     e6c:	6f 93       	push	r22
     e6e:	7f 93       	push	r23
     e70:	8f 93       	push	r24
     e72:	9f 93       	push	r25
     e74:	af 93       	push	r26
     e76:	bf 93       	push	r27
     e78:	ef 93       	push	r30
     e7a:	ff 93       	push	r31
	//static u32 Local_u32_Counter = 0;
	//Local_u32_Counter++;
	//if( Local_u32_Counter == Timer0_u32_NumOfOverFlows)
	//{
		CallBack_T0();
     e7c:	e0 91 2f 01 	lds	r30, 0x012F	; 0x80012f <CallBack_T0>
     e80:	f0 91 30 01 	lds	r31, 0x0130	; 0x800130 <CallBack_T0+0x1>
     e84:	09 95       	icall
		//Local_u32_Counter = 0;
		//TCNT0             =   256 - Timer0_u8_RemTicks;
	//}
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <M_Timer1_Pwm1Init>:

#include "Timer1.h"

void M_Timer1_Pwm1Init(void)
{
	SetBit(DDRD,5);  // to make PD5 as output
     ea8:	8d 9a       	sbi	0x11, 5	; 17
	
	// to select mode no 14 in table 47. fast PWM , top ICR1
	ClrBit(TCCR1A,0);
     eaa:	8f b5       	in	r24, 0x2f	; 47
     eac:	8e 7f       	andi	r24, 0xFE	; 254
     eae:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1A,1);
     eb0:	8f b5       	in	r24, 0x2f	; 47
     eb2:	82 60       	ori	r24, 0x02	; 2
     eb4:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1B,3);
     eb6:	8e b5       	in	r24, 0x2e	; 46
     eb8:	88 60       	ori	r24, 0x08	; 8
     eba:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,4);
     ebc:	8e b5       	in	r24, 0x2e	; 46
     ebe:	80 61       	ori	r24, 0x10	; 16
     ec0:	8e bd       	out	0x2e, r24	; 46
	
	// to select non inverted mode and generate PWM at OC1A pin
	ClrBit(TCCR1A,6);
     ec2:	8f b5       	in	r24, 0x2f	; 47
     ec4:	8f 7b       	andi	r24, 0xBF	; 191
     ec6:	8f bd       	out	0x2f, r24	; 47
	SetBit(TCCR1A,7);
     ec8:	8f b5       	in	r24, 0x2f	; 47
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	8f bd       	out	0x2f, r24	; 47
     ece:	08 95       	ret

00000ed0 <M_Timer1_Pwm1SetFrequancy>:
	
}

void M_Timer1_Pwm1SetFrequancy(u32 Local_u32_Frequancy)
{
     ed0:	9b 01       	movw	r18, r22
     ed2:	ac 01       	movw	r20, r24
	ICR1  = (((F_OSC * 1000000) / TIMER1_PRESCALER )  / Local_u32_Frequancy) - 1 ;
     ed4:	60 e9       	ldi	r22, 0x90	; 144
     ed6:	70 ed       	ldi	r23, 0xD0	; 208
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 30 08 	call	0x1060	; 0x1060 <__udivmodsi4>
     ee0:	21 50       	subi	r18, 0x01	; 1
     ee2:	31 09       	sbc	r19, r1
     ee4:	37 bd       	out	0x27, r19	; 39
     ee6:	26 bd       	out	0x26, r18	; 38
     ee8:	08 95       	ret

00000eea <M_Timer1_Pwm1SetDutyCycle>:
}

void M_Timer1_Pwm1SetDutyCycle(u8 Local_u8_DutyCycle)
{
	OCR1A = ((Local_u8_DutyCycle * ICR1 ) / 100) + 2 ;
     eea:	46 b5       	in	r20, 0x26	; 38
     eec:	57 b5       	in	r21, 0x27	; 39
     eee:	28 2f       	mov	r18, r24
     ef0:	24 9f       	mul	r18, r20
     ef2:	c0 01       	movw	r24, r0
     ef4:	25 9f       	mul	r18, r21
     ef6:	90 0d       	add	r25, r0
     ef8:	11 24       	eor	r1, r1
     efa:	9c 01       	movw	r18, r24
     efc:	36 95       	lsr	r19
     efe:	27 95       	ror	r18
     f00:	36 95       	lsr	r19
     f02:	27 95       	ror	r18
     f04:	ab e7       	ldi	r26, 0x7B	; 123
     f06:	b4 e1       	ldi	r27, 0x14	; 20
     f08:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__umulhisi3>
     f0c:	96 95       	lsr	r25
     f0e:	87 95       	ror	r24
     f10:	02 96       	adiw	r24, 0x02	; 2
     f12:	9b bd       	out	0x2b, r25	; 43
     f14:	8a bd       	out	0x2a, r24	; 42
     f16:	08 95       	ret

00000f18 <M_Timer1_Pwm1Start>:
	#elif   TIMER1_PRESCALER  == 8
	ClrBit(TCCR1B,0);
	SetBit(TCCR1B,1);
	ClrBit(TCCR1B,2);
	#elif   TIMER1_PRESCALER  == 64
	SetBit(TCCR1B,0);
     f18:	8e b5       	in	r24, 0x2e	; 46
     f1a:	81 60       	ori	r24, 0x01	; 1
     f1c:	8e bd       	out	0x2e, r24	; 46
	SetBit(TCCR1B,1);
     f1e:	8e b5       	in	r24, 0x2e	; 46
     f20:	82 60       	ori	r24, 0x02	; 2
     f22:	8e bd       	out	0x2e, r24	; 46
	ClrBit(TCCR1B,2);
     f24:	8e b5       	in	r24, 0x2e	; 46
     f26:	8b 7f       	andi	r24, 0xFB	; 251
     f28:	8e bd       	out	0x2e, r24	; 46
     f2a:	08 95       	ret

00000f2c <M_Timer2_Start>:
}


void M_Timer2_SetCallBack(void (*Ptr)(void))
{
	CallBack_T2 = Ptr;
     f2c:	85 b5       	in	r24, 0x25	; 37
     f2e:	81 60       	ori	r24, 0x01	; 1
     f30:	85 bd       	out	0x25, r24	; 37
     f32:	85 b5       	in	r24, 0x25	; 37
     f34:	82 60       	ori	r24, 0x02	; 2
     f36:	85 bd       	out	0x25, r24	; 37
     f38:	85 b5       	in	r24, 0x25	; 37
     f3a:	84 60       	ori	r24, 0x04	; 4
     f3c:	85 bd       	out	0x25, r24	; 37
     f3e:	08 95       	ret

00000f40 <M_Timer2_Pwm2Init>:
     f40:	8f 9a       	sbi	0x11, 7	; 17
     f42:	85 b5       	in	r24, 0x25	; 37
     f44:	88 60       	ori	r24, 0x08	; 8
     f46:	85 bd       	out	0x25, r24	; 37
     f48:	85 b5       	in	r24, 0x25	; 37
     f4a:	80 64       	ori	r24, 0x40	; 64
     f4c:	85 bd       	out	0x25, r24	; 37
     f4e:	85 b5       	in	r24, 0x25	; 37
     f50:	8f 7e       	andi	r24, 0xEF	; 239
     f52:	85 bd       	out	0x25, r24	; 37
     f54:	85 b5       	in	r24, 0x25	; 37
     f56:	80 62       	ori	r24, 0x20	; 32
     f58:	85 bd       	out	0x25, r24	; 37
     f5a:	08 95       	ret

00000f5c <M_Timer2_Pwm2SetDutyCycle>:
     f5c:	98 2f       	mov	r25, r24
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	64 e6       	ldi	r22, 0x64	; 100
     f62:	70 e0       	ldi	r23, 0x00	; 0
     f64:	0e 94 1c 08 	call	0x1038	; 0x1038 <__divmodhi4>
     f68:	61 50       	subi	r22, 0x01	; 1
     f6a:	63 bd       	out	0x23, r22	; 35
     f6c:	08 95       	ret

00000f6e <M_Timer2_Pwm2Start>:
     f6e:	0e 94 96 07 	call	0xf2c	; 0xf2c <M_Timer2_Start>
     f72:	08 95       	ret

00000f74 <__vector_5>:
}

#if   TIMER2_MODE   ==   NORMAL_MODE
ISR(TIMER2_OVF_vect)
{
     f74:	1f 92       	push	r1
     f76:	0f 92       	push	r0
     f78:	0f b6       	in	r0, 0x3f	; 63
     f7a:	0f 92       	push	r0
     f7c:	11 24       	eor	r1, r1
     f7e:	2f 93       	push	r18
     f80:	3f 93       	push	r19
     f82:	4f 93       	push	r20
     f84:	5f 93       	push	r21
     f86:	6f 93       	push	r22
     f88:	7f 93       	push	r23
     f8a:	8f 93       	push	r24
     f8c:	9f 93       	push	r25
     f8e:	af 93       	push	r26
     f90:	bf 93       	push	r27
     f92:	ef 93       	push	r30
     f94:	ff 93       	push	r31
	static u32 Local_u32_Counter = 0;
	Local_u32_Counter++;
     f96:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <Local_u32_Counter.1667>
     f9a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <Local_u32_Counter.1667+0x1>
     f9e:	a0 91 1c 01 	lds	r26, 0x011C	; 0x80011c <Local_u32_Counter.1667+0x2>
     fa2:	b0 91 1d 01 	lds	r27, 0x011D	; 0x80011d <Local_u32_Counter.1667+0x3>
     fa6:	01 96       	adiw	r24, 0x01	; 1
     fa8:	a1 1d       	adc	r26, r1
     faa:	b1 1d       	adc	r27, r1
     fac:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <Local_u32_Counter.1667>
     fb0:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <Local_u32_Counter.1667+0x1>
     fb4:	a0 93 1c 01 	sts	0x011C, r26	; 0x80011c <Local_u32_Counter.1667+0x2>
     fb8:	b0 93 1d 01 	sts	0x011D, r27	; 0x80011d <Local_u32_Counter.1667+0x3>
	if( Local_u32_Counter == Timer2_u32_NumOfOverFlows)
     fbc:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <Timer2_u32_NumOfOverFlows>
     fc0:	50 91 20 01 	lds	r21, 0x0120	; 0x800120 <Timer2_u32_NumOfOverFlows+0x1>
     fc4:	60 91 21 01 	lds	r22, 0x0121	; 0x800121 <Timer2_u32_NumOfOverFlows+0x2>
     fc8:	70 91 22 01 	lds	r23, 0x0122	; 0x800122 <Timer2_u32_NumOfOverFlows+0x3>
     fcc:	84 17       	cp	r24, r20
     fce:	95 07       	cpc	r25, r21
     fd0:	a6 07       	cpc	r26, r22
     fd2:	b7 07       	cpc	r27, r23
     fd4:	89 f4       	brne	.+34     	; 0xff8 <__vector_5+0x84>
	{
	CallBack_T2();
     fd6:	e0 91 31 01 	lds	r30, 0x0131	; 0x800131 <CallBack_T2>
     fda:	f0 91 32 01 	lds	r31, 0x0132	; 0x800132 <CallBack_T2+0x1>
     fde:	09 95       	icall
	Local_u32_Counter = 0;
     fe0:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <Local_u32_Counter.1667>
     fe4:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <Local_u32_Counter.1667+0x1>
     fe8:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <Local_u32_Counter.1667+0x2>
     fec:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <Local_u32_Counter.1667+0x3>
	TCNT2             =   256 - Timer2_u8_RemTicks;
     ff0:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Timer2_u8_RemTicks>
     ff4:	81 95       	neg	r24
     ff6:	84 bd       	out	0x24, r24	; 36
	}
}
     ff8:	ff 91       	pop	r31
     ffa:	ef 91       	pop	r30
     ffc:	bf 91       	pop	r27
     ffe:	af 91       	pop	r26
    1000:	9f 91       	pop	r25
    1002:	8f 91       	pop	r24
    1004:	7f 91       	pop	r23
    1006:	6f 91       	pop	r22
    1008:	5f 91       	pop	r21
    100a:	4f 91       	pop	r20
    100c:	3f 91       	pop	r19
    100e:	2f 91       	pop	r18
    1010:	0f 90       	pop	r0
    1012:	0f be       	out	0x3f, r0	; 63
    1014:	0f 90       	pop	r0
    1016:	1f 90       	pop	r1
    1018:	18 95       	reti

0000101a <M_Uart_Init>:

void M_Uart_Transmit(u8 Local_u8_Data)
{
	UDR = Local_u8_Data;
	while (GetBit(UCSRA,6) == 0); // lock in this loop until transmit is finished
}
    101a:	88 98       	cbi	0x11, 0	; 17
    101c:	89 9a       	sbi	0x11, 1	; 17
    101e:	52 98       	cbi	0x0a, 2	; 10
    1020:	86 e8       	ldi	r24, 0x86	; 134
    1022:	80 bd       	out	0x20, r24	; 32
    1024:	87 e6       	ldi	r24, 0x67	; 103
    1026:	89 b9       	out	0x09, r24	; 9
    1028:	10 bc       	out	0x20, r1	; 32
    102a:	54 9a       	sbi	0x0a, 4	; 10
    102c:	53 9a       	sbi	0x0a, 3	; 10
    102e:	08 95       	ret

00001030 <M_Uart_Rec>:

u8   M_Uart_Rec(void)
{
	while (GetBit(UCSRA,7) == 0);  // lock in this loop until receive is finished
    1030:	5f 9b       	sbis	0x0b, 7	; 11
    1032:	fe cf       	rjmp	.-4      	; 0x1030 <M_Uart_Rec>
	return UDR;
    1034:	8c b1       	in	r24, 0x0c	; 12
    1036:	08 95       	ret

00001038 <__divmodhi4>:
    1038:	97 fb       	bst	r25, 7
    103a:	07 2e       	mov	r0, r23
    103c:	16 f4       	brtc	.+4      	; 0x1042 <__divmodhi4+0xa>
    103e:	00 94       	com	r0
    1040:	07 d0       	rcall	.+14     	; 0x1050 <__divmodhi4_neg1>
    1042:	77 fd       	sbrc	r23, 7
    1044:	09 d0       	rcall	.+18     	; 0x1058 <__divmodhi4_neg2>
    1046:	0e 94 80 08 	call	0x1100	; 0x1100 <__udivmodhi4>
    104a:	07 fc       	sbrc	r0, 7
    104c:	05 d0       	rcall	.+10     	; 0x1058 <__divmodhi4_neg2>
    104e:	3e f4       	brtc	.+14     	; 0x105e <__divmodhi4_exit>

00001050 <__divmodhi4_neg1>:
    1050:	90 95       	com	r25
    1052:	81 95       	neg	r24
    1054:	9f 4f       	sbci	r25, 0xFF	; 255
    1056:	08 95       	ret

00001058 <__divmodhi4_neg2>:
    1058:	70 95       	com	r23
    105a:	61 95       	neg	r22
    105c:	7f 4f       	sbci	r23, 0xFF	; 255

0000105e <__divmodhi4_exit>:
    105e:	08 95       	ret

00001060 <__udivmodsi4>:
    1060:	a1 e2       	ldi	r26, 0x21	; 33
    1062:	1a 2e       	mov	r1, r26
    1064:	aa 1b       	sub	r26, r26
    1066:	bb 1b       	sub	r27, r27
    1068:	fd 01       	movw	r30, r26
    106a:	0d c0       	rjmp	.+26     	; 0x1086 <__udivmodsi4_ep>

0000106c <__udivmodsi4_loop>:
    106c:	aa 1f       	adc	r26, r26
    106e:	bb 1f       	adc	r27, r27
    1070:	ee 1f       	adc	r30, r30
    1072:	ff 1f       	adc	r31, r31
    1074:	a2 17       	cp	r26, r18
    1076:	b3 07       	cpc	r27, r19
    1078:	e4 07       	cpc	r30, r20
    107a:	f5 07       	cpc	r31, r21
    107c:	20 f0       	brcs	.+8      	; 0x1086 <__udivmodsi4_ep>
    107e:	a2 1b       	sub	r26, r18
    1080:	b3 0b       	sbc	r27, r19
    1082:	e4 0b       	sbc	r30, r20
    1084:	f5 0b       	sbc	r31, r21

00001086 <__udivmodsi4_ep>:
    1086:	66 1f       	adc	r22, r22
    1088:	77 1f       	adc	r23, r23
    108a:	88 1f       	adc	r24, r24
    108c:	99 1f       	adc	r25, r25
    108e:	1a 94       	dec	r1
    1090:	69 f7       	brne	.-38     	; 0x106c <__udivmodsi4_loop>
    1092:	60 95       	com	r22
    1094:	70 95       	com	r23
    1096:	80 95       	com	r24
    1098:	90 95       	com	r25
    109a:	9b 01       	movw	r18, r22
    109c:	ac 01       	movw	r20, r24
    109e:	bd 01       	movw	r22, r26
    10a0:	cf 01       	movw	r24, r30
    10a2:	08 95       	ret

000010a4 <__divmodsi4>:
    10a4:	05 2e       	mov	r0, r21
    10a6:	97 fb       	bst	r25, 7
    10a8:	1e f4       	brtc	.+6      	; 0x10b0 <__divmodsi4+0xc>
    10aa:	00 94       	com	r0
    10ac:	0e 94 69 08 	call	0x10d2	; 0x10d2 <__negsi2>
    10b0:	57 fd       	sbrc	r21, 7
    10b2:	07 d0       	rcall	.+14     	; 0x10c2 <__divmodsi4_neg2>
    10b4:	0e 94 30 08 	call	0x1060	; 0x1060 <__udivmodsi4>
    10b8:	07 fc       	sbrc	r0, 7
    10ba:	03 d0       	rcall	.+6      	; 0x10c2 <__divmodsi4_neg2>
    10bc:	4e f4       	brtc	.+18     	; 0x10d0 <__divmodsi4_exit>
    10be:	0c 94 69 08 	jmp	0x10d2	; 0x10d2 <__negsi2>

000010c2 <__divmodsi4_neg2>:
    10c2:	50 95       	com	r21
    10c4:	40 95       	com	r20
    10c6:	30 95       	com	r19
    10c8:	21 95       	neg	r18
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	4f 4f       	sbci	r20, 0xFF	; 255
    10ce:	5f 4f       	sbci	r21, 0xFF	; 255

000010d0 <__divmodsi4_exit>:
    10d0:	08 95       	ret

000010d2 <__negsi2>:
    10d2:	90 95       	com	r25
    10d4:	80 95       	com	r24
    10d6:	70 95       	com	r23
    10d8:	61 95       	neg	r22
    10da:	7f 4f       	sbci	r23, 0xFF	; 255
    10dc:	8f 4f       	sbci	r24, 0xFF	; 255
    10de:	9f 4f       	sbci	r25, 0xFF	; 255
    10e0:	08 95       	ret

000010e2 <__umulhisi3>:
    10e2:	a2 9f       	mul	r26, r18
    10e4:	b0 01       	movw	r22, r0
    10e6:	b3 9f       	mul	r27, r19
    10e8:	c0 01       	movw	r24, r0
    10ea:	a3 9f       	mul	r26, r19
    10ec:	70 0d       	add	r23, r0
    10ee:	81 1d       	adc	r24, r1
    10f0:	11 24       	eor	r1, r1
    10f2:	91 1d       	adc	r25, r1
    10f4:	b2 9f       	mul	r27, r18
    10f6:	70 0d       	add	r23, r0
    10f8:	81 1d       	adc	r24, r1
    10fa:	11 24       	eor	r1, r1
    10fc:	91 1d       	adc	r25, r1
    10fe:	08 95       	ret

00001100 <__udivmodhi4>:
    1100:	aa 1b       	sub	r26, r26
    1102:	bb 1b       	sub	r27, r27
    1104:	51 e1       	ldi	r21, 0x11	; 17
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <__udivmodhi4_ep>

00001108 <__udivmodhi4_loop>:
    1108:	aa 1f       	adc	r26, r26
    110a:	bb 1f       	adc	r27, r27
    110c:	a6 17       	cp	r26, r22
    110e:	b7 07       	cpc	r27, r23
    1110:	10 f0       	brcs	.+4      	; 0x1116 <__udivmodhi4_ep>
    1112:	a6 1b       	sub	r26, r22
    1114:	b7 0b       	sbc	r27, r23

00001116 <__udivmodhi4_ep>:
    1116:	88 1f       	adc	r24, r24
    1118:	99 1f       	adc	r25, r25
    111a:	5a 95       	dec	r21
    111c:	a9 f7       	brne	.-22     	; 0x1108 <__udivmodhi4_loop>
    111e:	80 95       	com	r24
    1120:	90 95       	com	r25
    1122:	bc 01       	movw	r22, r24
    1124:	cd 01       	movw	r24, r26
    1126:	08 95       	ret

00001128 <_exit>:
    1128:	f8 94       	cli

0000112a <__stop_program>:
    112a:	ff cf       	rjmp	.-2      	; 0x112a <__stop_program>
